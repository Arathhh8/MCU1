
002SampleApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001644  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08001774  08001774  00011774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001918  08001918  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  08001918  08001918  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001918  08001918  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001918  08001918  00011918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800191c  0800191c  0001191c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08001920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  200000ac  080019cc  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  080019cc  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b28  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003d5  00000000  00000000  00020bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  00020fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000100  00000000  00000000  00021110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b09  00000000  00000000  00021210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000147b  00000000  00000000  00023d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000938c  00000000  00000000  00025194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002e520  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000efc  00000000  00000000  0002e570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200000ac 	.word	0x200000ac
 800014c:	00000000 	.word	0x00000000
 8000150:	0800175c 	.word	0x0800175c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200000b0 	.word	0x200000b0
 800016c:	0800175c 	.word	0x0800175c

08000170 <array_fill_numbers>:
int numbers[] = { 456,345,678,567,890,456,3456,123,765,456,896,456,678,987,000,145,90};

int  someData = 90;

void array_fill_numbers(int pNumbers[], unsigned int len)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]

    for ( unsigned int i = 0 ; i < len ; i++)
 800017a:	2300      	movs	r3, #0
 800017c:	60fb      	str	r3, [r7, #12]
 800017e:	e015      	b.n	80001ac <array_fill_numbers+0x3c>
    {
        pNumbers[i] = rand() % 1000;
 8000180:	f000 fa66 	bl	8000650 <rand>
 8000184:	4602      	mov	r2, r0
 8000186:	68fb      	ldr	r3, [r7, #12]
 8000188:	009b      	lsls	r3, r3, #2
 800018a:	6879      	ldr	r1, [r7, #4]
 800018c:	4419      	add	r1, r3
 800018e:	4b0c      	ldr	r3, [pc, #48]	; (80001c0 <array_fill_numbers+0x50>)
 8000190:	fb83 0302 	smull	r0, r3, r3, r2
 8000194:	1198      	asrs	r0, r3, #6
 8000196:	17d3      	asrs	r3, r2, #31
 8000198:	1ac3      	subs	r3, r0, r3
 800019a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800019e:	fb00 f303 	mul.w	r3, r0, r3
 80001a2:	1ad3      	subs	r3, r2, r3
 80001a4:	600b      	str	r3, [r1, #0]
    for ( unsigned int i = 0 ; i < len ; i++)
 80001a6:	68fb      	ldr	r3, [r7, #12]
 80001a8:	3301      	adds	r3, #1
 80001aa:	60fb      	str	r3, [r7, #12]
 80001ac:	68fa      	ldr	r2, [r7, #12]
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	429a      	cmp	r2, r3
 80001b2:	d3e5      	bcc.n	8000180 <array_fill_numbers+0x10>
    }

}
 80001b4:	bf00      	nop
 80001b6:	bf00      	nop
 80001b8:	3710      	adds	r7, #16
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	10624dd3 	.word	0x10624dd3

080001c4 <display_numbers>:

void display_numbers(int *pNumbers, unsigned int len, char *pMessage)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b086      	sub	sp, #24
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	60f8      	str	r0, [r7, #12]
 80001cc:	60b9      	str	r1, [r7, #8]
 80001ce:	607a      	str	r2, [r7, #4]
    printf("%s",pMessage);
 80001d0:	6879      	ldr	r1, [r7, #4]
 80001d2:	480e      	ldr	r0, [pc, #56]	; (800020c <display_numbers+0x48>)
 80001d4:	f000 fa10 	bl	80005f8 <iprintf>

    for (unsigned i = 0 ; i < len ; i++)
 80001d8:	2300      	movs	r3, #0
 80001da:	617b      	str	r3, [r7, #20]
 80001dc:	e00b      	b.n	80001f6 <display_numbers+0x32>
    {
        printf("%5d  ",pNumbers[i]);
 80001de:	697b      	ldr	r3, [r7, #20]
 80001e0:	009b      	lsls	r3, r3, #2
 80001e2:	68fa      	ldr	r2, [r7, #12]
 80001e4:	4413      	add	r3, r2
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4619      	mov	r1, r3
 80001ea:	4809      	ldr	r0, [pc, #36]	; (8000210 <display_numbers+0x4c>)
 80001ec:	f000 fa04 	bl	80005f8 <iprintf>
    for (unsigned i = 0 ; i < len ; i++)
 80001f0:	697b      	ldr	r3, [r7, #20]
 80001f2:	3301      	adds	r3, #1
 80001f4:	617b      	str	r3, [r7, #20]
 80001f6:	697a      	ldr	r2, [r7, #20]
 80001f8:	68bb      	ldr	r3, [r7, #8]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d3ef      	bcc.n	80001de <display_numbers+0x1a>
    }

    printf("\n");
 80001fe:	200a      	movs	r0, #10
 8000200:	f000 fa12 	bl	8000628 <putchar>
}
 8000204:	bf00      	nop
 8000206:	3718      	adds	r7, #24
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	08001774 	.word	0x08001774
 8000210:	08001778 	.word	0x08001778

08000214 <swap_numbers>:


void swap_numbers(int *x,int *y)
{
 8000214:	b480      	push	{r7}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	6039      	str	r1, [r7, #0]
     int temp=*x;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	60fb      	str	r3, [r7, #12]
     *x=*y;
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	601a      	str	r2, [r3, #0]
     *y=temp;
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	68fa      	ldr	r2, [r7, #12]
 8000230:	601a      	str	r2, [r3, #0]
     void (*jump_addr) (void);
     jump_addr = (void*)0x20000009;
     jump_addr();
#endif

     someData = 10;
 8000232:	4b04      	ldr	r3, [pc, #16]	; (8000244 <swap_numbers+0x30>)
 8000234:	220a      	movs	r2, #10
 8000236:	601a      	str	r2, [r3, #0]
}
 8000238:	bf00      	nop
 800023a:	3714      	adds	r7, #20
 800023c:	46bd      	mov	sp, r7
 800023e:	bc80      	pop	{r7}
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000044 	.word	0x20000044

08000248 <bubble_sort>:


void bubble_sort(int *pNumbers , unsigned int len)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b086      	sub	sp, #24
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	6039      	str	r1, [r7, #0]

    int i,j,flag=0;
 8000252:	2300      	movs	r3, #0
 8000254:	60fb      	str	r3, [r7, #12]

    for(i=0;i<len-1;i++)
 8000256:	2300      	movs	r3, #0
 8000258:	617b      	str	r3, [r7, #20]
 800025a:	e02f      	b.n	80002bc <bubble_sort+0x74>
    {
        flag=0;
 800025c:	2300      	movs	r3, #0
 800025e:	60fb      	str	r3, [r7, #12]

        for(j=0;j<len-1-i;j++)
 8000260:	2300      	movs	r3, #0
 8000262:	613b      	str	r3, [r7, #16]
 8000264:	e01d      	b.n	80002a2 <bubble_sort+0x5a>
        {
            if(pNumbers[j] > pNumbers[j+1])
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	687a      	ldr	r2, [r7, #4]
 800026c:	4413      	add	r3, r2
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	693b      	ldr	r3, [r7, #16]
 8000272:	3301      	adds	r3, #1
 8000274:	009b      	lsls	r3, r3, #2
 8000276:	6879      	ldr	r1, [r7, #4]
 8000278:	440b      	add	r3, r1
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	429a      	cmp	r2, r3
 800027e:	dd0d      	ble.n	800029c <bubble_sort+0x54>
            {
                swap_numbers(&pNumbers[j],&pNumbers[j+1]);
 8000280:	693b      	ldr	r3, [r7, #16]
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	687a      	ldr	r2, [r7, #4]
 8000286:	18d0      	adds	r0, r2, r3
 8000288:	693b      	ldr	r3, [r7, #16]
 800028a:	3301      	adds	r3, #1
 800028c:	009b      	lsls	r3, r3, #2
 800028e:	687a      	ldr	r2, [r7, #4]
 8000290:	4413      	add	r3, r2
 8000292:	4619      	mov	r1, r3
 8000294:	f7ff ffbe 	bl	8000214 <swap_numbers>
                flag=1;
 8000298:	2301      	movs	r3, #1
 800029a:	60fb      	str	r3, [r7, #12]
        for(j=0;j<len-1-i;j++)
 800029c:	693b      	ldr	r3, [r7, #16]
 800029e:	3301      	adds	r3, #1
 80002a0:	613b      	str	r3, [r7, #16]
 80002a2:	697b      	ldr	r3, [r7, #20]
 80002a4:	683a      	ldr	r2, [r7, #0]
 80002a6:	1ad3      	subs	r3, r2, r3
 80002a8:	1e5a      	subs	r2, r3, #1
 80002aa:	693b      	ldr	r3, [r7, #16]
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d8da      	bhi.n	8000266 <bubble_sort+0x1e>
            }
        }

        if(flag==0)
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d008      	beq.n	80002c8 <bubble_sort+0x80>
    for(i=0;i<len-1;i++)
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	3301      	adds	r3, #1
 80002ba:	617b      	str	r3, [r7, #20]
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	1e5a      	subs	r2, r3, #1
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d8ca      	bhi.n	800025c <bubble_sort+0x14>
            break;
    }
}
 80002c6:	e000      	b.n	80002ca <bubble_sort+0x82>
            break;
 80002c8:	bf00      	nop
}
 80002ca:	bf00      	nop
 80002cc:	3718      	adds	r7, #24
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}

080002d2 <insertion_sort>:

void insertion_sort(int *pNumbers , unsigned int len)
{
 80002d2:	b480      	push	{r7}
 80002d4:	b087      	sub	sp, #28
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	6078      	str	r0, [r7, #4]
 80002da:	6039      	str	r1, [r7, #0]

     int i,j,num;

     for(i=1 ; i<len ; i++)
 80002dc:	2301      	movs	r3, #1
 80002de:	617b      	str	r3, [r7, #20]
 80002e0:	e02c      	b.n	800033c <insertion_sort+0x6a>
     {
         j=i-1;
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	3b01      	subs	r3, #1
 80002e6:	613b      	str	r3, [r7, #16]

         num = pNumbers[i];
 80002e8:	697b      	ldr	r3, [r7, #20]
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	4413      	add	r3, r2
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	60fb      	str	r3, [r7, #12]

         while( (j>-1) && (pNumbers[j] > num) )
 80002f4:	e00d      	b.n	8000312 <insertion_sort+0x40>
         {
             pNumbers[j+1] = pNumbers[j];
 80002f6:	693b      	ldr	r3, [r7, #16]
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	687a      	ldr	r2, [r7, #4]
 80002fc:	441a      	add	r2, r3
 80002fe:	693b      	ldr	r3, [r7, #16]
 8000300:	3301      	adds	r3, #1
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	6879      	ldr	r1, [r7, #4]
 8000306:	440b      	add	r3, r1
 8000308:	6812      	ldr	r2, [r2, #0]
 800030a:	601a      	str	r2, [r3, #0]
             j--;
 800030c:	693b      	ldr	r3, [r7, #16]
 800030e:	3b01      	subs	r3, #1
 8000310:	613b      	str	r3, [r7, #16]
         while( (j>-1) && (pNumbers[j] > num) )
 8000312:	693b      	ldr	r3, [r7, #16]
 8000314:	2b00      	cmp	r3, #0
 8000316:	db07      	blt.n	8000328 <insertion_sort+0x56>
 8000318:	693b      	ldr	r3, [r7, #16]
 800031a:	009b      	lsls	r3, r3, #2
 800031c:	687a      	ldr	r2, [r7, #4]
 800031e:	4413      	add	r3, r2
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	68fa      	ldr	r2, [r7, #12]
 8000324:	429a      	cmp	r2, r3
 8000326:	dbe6      	blt.n	80002f6 <insertion_sort+0x24>
         }

         pNumbers[j+1]=num;
 8000328:	693b      	ldr	r3, [r7, #16]
 800032a:	3301      	adds	r3, #1
 800032c:	009b      	lsls	r3, r3, #2
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	4413      	add	r3, r2
 8000332:	68fa      	ldr	r2, [r7, #12]
 8000334:	601a      	str	r2, [r3, #0]
     for(i=1 ; i<len ; i++)
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	3301      	adds	r3, #1
 800033a:	617b      	str	r3, [r7, #20]
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	683a      	ldr	r2, [r7, #0]
 8000340:	429a      	cmp	r2, r3
 8000342:	d8ce      	bhi.n	80002e2 <insertion_sort+0x10>
     }


}
 8000344:	bf00      	nop
 8000346:	bf00      	nop
 8000348:	371c      	adds	r7, #28
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr

08000350 <main>:



int main()
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0

    unsigned int len = sizeof(numbers)/sizeof(int);
 8000356:	2311      	movs	r3, #17
 8000358:	607b      	str	r3, [r7, #4]

    array_fill_numbers(numbers,len);
 800035a:	6879      	ldr	r1, [r7, #4]
 800035c:	4813      	ldr	r0, [pc, #76]	; (80003ac <main+0x5c>)
 800035e:	f7ff ff07 	bl	8000170 <array_fill_numbers>

    display_numbers(numbers,len,"B-unsorted array :");
 8000362:	4a13      	ldr	r2, [pc, #76]	; (80003b0 <main+0x60>)
 8000364:	6879      	ldr	r1, [r7, #4]
 8000366:	4811      	ldr	r0, [pc, #68]	; (80003ac <main+0x5c>)
 8000368:	f7ff ff2c 	bl	80001c4 <display_numbers>

    bubble_sort(numbers,len);
 800036c:	6879      	ldr	r1, [r7, #4]
 800036e:	480f      	ldr	r0, [pc, #60]	; (80003ac <main+0x5c>)
 8000370:	f7ff ff6a 	bl	8000248 <bubble_sort>

    display_numbers(numbers,len,"B-sorted array   :");
 8000374:	4a0f      	ldr	r2, [pc, #60]	; (80003b4 <main+0x64>)
 8000376:	6879      	ldr	r1, [r7, #4]
 8000378:	480c      	ldr	r0, [pc, #48]	; (80003ac <main+0x5c>)
 800037a:	f7ff ff23 	bl	80001c4 <display_numbers>

    array_fill_numbers(numbers,len);
 800037e:	6879      	ldr	r1, [r7, #4]
 8000380:	480a      	ldr	r0, [pc, #40]	; (80003ac <main+0x5c>)
 8000382:	f7ff fef5 	bl	8000170 <array_fill_numbers>

    display_numbers(numbers,len,"I-unsorted array :");
 8000386:	4a0c      	ldr	r2, [pc, #48]	; (80003b8 <main+0x68>)
 8000388:	6879      	ldr	r1, [r7, #4]
 800038a:	4808      	ldr	r0, [pc, #32]	; (80003ac <main+0x5c>)
 800038c:	f7ff ff1a 	bl	80001c4 <display_numbers>

    insertion_sort(numbers,len);
 8000390:	6879      	ldr	r1, [r7, #4]
 8000392:	4806      	ldr	r0, [pc, #24]	; (80003ac <main+0x5c>)
 8000394:	f7ff ff9d 	bl	80002d2 <insertion_sort>

    display_numbers(numbers,len,"I-sorted array   :");
 8000398:	4a08      	ldr	r2, [pc, #32]	; (80003bc <main+0x6c>)
 800039a:	6879      	ldr	r1, [r7, #4]
 800039c:	4803      	ldr	r0, [pc, #12]	; (80003ac <main+0x5c>)
 800039e:	f7ff ff11 	bl	80001c4 <display_numbers>



    return 0;
 80003a2:	2300      	movs	r3, #0
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	3708      	adds	r7, #8
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	20000000 	.word	0x20000000
 80003b0:	08001780 	.word	0x08001780
 80003b4:	08001794 	.word	0x08001794
 80003b8:	080017a8 	.word	0x080017a8
 80003bc:	080017bc 	.word	0x080017bc

080003c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
	return 1;
 80003c4:	2301      	movs	r3, #1
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bc80      	pop	{r7}
 80003cc:	4770      	bx	lr

080003ce <_kill>:

int _kill(int pid, int sig)
{
 80003ce:	b580      	push	{r7, lr}
 80003d0:	b082      	sub	sp, #8
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
 80003d6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80003d8:	f000 f8dc 	bl	8000594 <__errno>
 80003dc:	4603      	mov	r3, r0
 80003de:	2216      	movs	r2, #22
 80003e0:	601a      	str	r2, [r3, #0]
	return -1;
 80003e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <_exit>:

void _exit (int status)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b082      	sub	sp, #8
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80003f6:	f04f 31ff 	mov.w	r1, #4294967295
 80003fa:	6878      	ldr	r0, [r7, #4]
 80003fc:	f7ff ffe7 	bl	80003ce <_kill>
	while (1) {}		/* Make sure we hang here */
 8000400:	e7fe      	b.n	8000400 <_exit+0x12>

08000402 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	b086      	sub	sp, #24
 8000406:	af00      	add	r7, sp, #0
 8000408:	60f8      	str	r0, [r7, #12]
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
 8000412:	e00a      	b.n	800042a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000414:	f3af 8000 	nop.w
 8000418:	4601      	mov	r1, r0
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	1c5a      	adds	r2, r3, #1
 800041e:	60ba      	str	r2, [r7, #8]
 8000420:	b2ca      	uxtb	r2, r1
 8000422:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	3301      	adds	r3, #1
 8000428:	617b      	str	r3, [r7, #20]
 800042a:	697a      	ldr	r2, [r7, #20]
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	429a      	cmp	r2, r3
 8000430:	dbf0      	blt.n	8000414 <_read+0x12>
	}

return len;
 8000432:	687b      	ldr	r3, [r7, #4]
}
 8000434:	4618      	mov	r0, r3
 8000436:	3718      	adds	r7, #24
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b086      	sub	sp, #24
 8000440:	af00      	add	r7, sp, #0
 8000442:	60f8      	str	r0, [r7, #12]
 8000444:	60b9      	str	r1, [r7, #8]
 8000446:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]
 800044c:	e009      	b.n	8000462 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	1c5a      	adds	r2, r3, #1
 8000452:	60ba      	str	r2, [r7, #8]
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	4618      	mov	r0, r3
 8000458:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	3301      	adds	r3, #1
 8000460:	617b      	str	r3, [r7, #20]
 8000462:	697a      	ldr	r2, [r7, #20]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	429a      	cmp	r2, r3
 8000468:	dbf1      	blt.n	800044e <_write+0x12>
	}
	return len;
 800046a:	687b      	ldr	r3, [r7, #4]
}
 800046c:	4618      	mov	r0, r3
 800046e:	3718      	adds	r7, #24
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <_close>:

int _close(int file)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	return -1;
 800047c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000480:	4618      	mov	r0, r3
 8000482:	370c      	adds	r7, #12
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr

0800048a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800048a:	b480      	push	{r7}
 800048c:	b083      	sub	sp, #12
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
 8000492:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800049a:	605a      	str	r2, [r3, #4]
	return 0;
 800049c:	2300      	movs	r3, #0
}
 800049e:	4618      	mov	r0, r3
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <_isatty>:

int _isatty(int file)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
	return 1;
 80004b0:	2301      	movs	r3, #1
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bc80      	pop	{r7}
 80004ba:	4770      	bx	lr

080004bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	607a      	str	r2, [r7, #4]
	return 0;
 80004c8:	2300      	movs	r3, #0
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr

080004d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004dc:	4a14      	ldr	r2, [pc, #80]	; (8000530 <_sbrk+0x5c>)
 80004de:	4b15      	ldr	r3, [pc, #84]	; (8000534 <_sbrk+0x60>)
 80004e0:	1ad3      	subs	r3, r2, r3
 80004e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004e8:	4b13      	ldr	r3, [pc, #76]	; (8000538 <_sbrk+0x64>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d102      	bne.n	80004f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <_sbrk+0x64>)
 80004f2:	4a12      	ldr	r2, [pc, #72]	; (800053c <_sbrk+0x68>)
 80004f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004f6:	4b10      	ldr	r3, [pc, #64]	; (8000538 <_sbrk+0x64>)
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4413      	add	r3, r2
 80004fe:	693a      	ldr	r2, [r7, #16]
 8000500:	429a      	cmp	r2, r3
 8000502:	d207      	bcs.n	8000514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000504:	f000 f846 	bl	8000594 <__errno>
 8000508:	4603      	mov	r3, r0
 800050a:	220c      	movs	r2, #12
 800050c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800050e:	f04f 33ff 	mov.w	r3, #4294967295
 8000512:	e009      	b.n	8000528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <_sbrk+0x64>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800051a:	4b07      	ldr	r3, [pc, #28]	; (8000538 <_sbrk+0x64>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4413      	add	r3, r2
 8000522:	4a05      	ldr	r2, [pc, #20]	; (8000538 <_sbrk+0x64>)
 8000524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000526:	68fb      	ldr	r3, [r7, #12]
}
 8000528:	4618      	mov	r0, r3
 800052a:	3718      	adds	r7, #24
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20005000 	.word	0x20005000
 8000534:	00000400 	.word	0x00000400
 8000538:	200000c8 	.word	0x200000c8
 800053c:	200000e0 	.word	0x200000e0

08000540 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000540:	480d      	ldr	r0, [pc, #52]	; (8000578 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000542:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000544:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000548:	480c      	ldr	r0, [pc, #48]	; (800057c <LoopForever+0x6>)
  ldr r1, =_edata
 800054a:	490d      	ldr	r1, [pc, #52]	; (8000580 <LoopForever+0xa>)
  ldr r2, =_sidata
 800054c:	4a0d      	ldr	r2, [pc, #52]	; (8000584 <LoopForever+0xe>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000550:	e002      	b.n	8000558 <LoopCopyDataInit>

08000552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000556:	3304      	adds	r3, #4

08000558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800055a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800055c:	d3f9      	bcc.n	8000552 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055e:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000560:	4c0a      	ldr	r4, [pc, #40]	; (800058c <LoopForever+0x16>)
  movs r3, #0
 8000562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000564:	e001      	b.n	800056a <LoopFillZerobss>

08000566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000568:	3204      	adds	r2, #4

0800056a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800056a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800056c:	d3fb      	bcc.n	8000566 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800056e:	f000 f817 	bl	80005a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000572:	f7ff feed 	bl	8000350 <main>

08000576 <LoopForever>:

LoopForever:
    b LoopForever
 8000576:	e7fe      	b.n	8000576 <LoopForever>
  ldr   r0, =_estack
 8000578:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800057c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000580:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 8000584:	08001920 	.word	0x08001920
  ldr r2, =_sbss
 8000588:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 800058c:	200000dc 	.word	0x200000dc

08000590 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000590:	e7fe      	b.n	8000590 <ADC1_2_IRQHandler>
	...

08000594 <__errno>:
 8000594:	4b01      	ldr	r3, [pc, #4]	; (800059c <__errno+0x8>)
 8000596:	6818      	ldr	r0, [r3, #0]
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000048 	.word	0x20000048

080005a0 <__libc_init_array>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	2600      	movs	r6, #0
 80005a4:	4d0c      	ldr	r5, [pc, #48]	; (80005d8 <__libc_init_array+0x38>)
 80005a6:	4c0d      	ldr	r4, [pc, #52]	; (80005dc <__libc_init_array+0x3c>)
 80005a8:	1b64      	subs	r4, r4, r5
 80005aa:	10a4      	asrs	r4, r4, #2
 80005ac:	42a6      	cmp	r6, r4
 80005ae:	d109      	bne.n	80005c4 <__libc_init_array+0x24>
 80005b0:	f001 f8d4 	bl	800175c <_init>
 80005b4:	2600      	movs	r6, #0
 80005b6:	4d0a      	ldr	r5, [pc, #40]	; (80005e0 <__libc_init_array+0x40>)
 80005b8:	4c0a      	ldr	r4, [pc, #40]	; (80005e4 <__libc_init_array+0x44>)
 80005ba:	1b64      	subs	r4, r4, r5
 80005bc:	10a4      	asrs	r4, r4, #2
 80005be:	42a6      	cmp	r6, r4
 80005c0:	d105      	bne.n	80005ce <__libc_init_array+0x2e>
 80005c2:	bd70      	pop	{r4, r5, r6, pc}
 80005c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80005c8:	4798      	blx	r3
 80005ca:	3601      	adds	r6, #1
 80005cc:	e7ee      	b.n	80005ac <__libc_init_array+0xc>
 80005ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80005d2:	4798      	blx	r3
 80005d4:	3601      	adds	r6, #1
 80005d6:	e7f2      	b.n	80005be <__libc_init_array+0x1e>
 80005d8:	08001918 	.word	0x08001918
 80005dc:	08001918 	.word	0x08001918
 80005e0:	08001918 	.word	0x08001918
 80005e4:	0800191c 	.word	0x0800191c

080005e8 <memset>:
 80005e8:	4603      	mov	r3, r0
 80005ea:	4402      	add	r2, r0
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d100      	bne.n	80005f2 <memset+0xa>
 80005f0:	4770      	bx	lr
 80005f2:	f803 1b01 	strb.w	r1, [r3], #1
 80005f6:	e7f9      	b.n	80005ec <memset+0x4>

080005f8 <iprintf>:
 80005f8:	b40f      	push	{r0, r1, r2, r3}
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <iprintf+0x2c>)
 80005fc:	b513      	push	{r0, r1, r4, lr}
 80005fe:	681c      	ldr	r4, [r3, #0]
 8000600:	b124      	cbz	r4, 800060c <iprintf+0x14>
 8000602:	69a3      	ldr	r3, [r4, #24]
 8000604:	b913      	cbnz	r3, 800060c <iprintf+0x14>
 8000606:	4620      	mov	r0, r4
 8000608:	f000 f8d6 	bl	80007b8 <__sinit>
 800060c:	ab05      	add	r3, sp, #20
 800060e:	4620      	mov	r0, r4
 8000610:	9a04      	ldr	r2, [sp, #16]
 8000612:	68a1      	ldr	r1, [r4, #8]
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	f000 fa8d 	bl	8000b34 <_vfiprintf_r>
 800061a:	b002      	add	sp, #8
 800061c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000620:	b004      	add	sp, #16
 8000622:	4770      	bx	lr
 8000624:	20000048 	.word	0x20000048

08000628 <putchar>:
 8000628:	b538      	push	{r3, r4, r5, lr}
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <putchar+0x24>)
 800062c:	4605      	mov	r5, r0
 800062e:	681c      	ldr	r4, [r3, #0]
 8000630:	b124      	cbz	r4, 800063c <putchar+0x14>
 8000632:	69a3      	ldr	r3, [r4, #24]
 8000634:	b913      	cbnz	r3, 800063c <putchar+0x14>
 8000636:	4620      	mov	r0, r4
 8000638:	f000 f8be 	bl	80007b8 <__sinit>
 800063c:	4629      	mov	r1, r5
 800063e:	4620      	mov	r0, r4
 8000640:	68a2      	ldr	r2, [r4, #8]
 8000642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000646:	f000 bd3b 	b.w	80010c0 <_putc_r>
 800064a:	bf00      	nop
 800064c:	20000048 	.word	0x20000048

08000650 <rand>:
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <rand+0x5c>)
 8000652:	b510      	push	{r4, lr}
 8000654:	681c      	ldr	r4, [r3, #0]
 8000656:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000658:	b9b3      	cbnz	r3, 8000688 <rand+0x38>
 800065a:	2018      	movs	r0, #24
 800065c:	f000 f95e 	bl	800091c <malloc>
 8000660:	4602      	mov	r2, r0
 8000662:	63a0      	str	r0, [r4, #56]	; 0x38
 8000664:	b920      	cbnz	r0, 8000670 <rand+0x20>
 8000666:	214e      	movs	r1, #78	; 0x4e
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <rand+0x60>)
 800066a:	4812      	ldr	r0, [pc, #72]	; (80006b4 <rand+0x64>)
 800066c:	f000 f82e 	bl	80006cc <__assert_func>
 8000670:	4911      	ldr	r1, [pc, #68]	; (80006b8 <rand+0x68>)
 8000672:	4b12      	ldr	r3, [pc, #72]	; (80006bc <rand+0x6c>)
 8000674:	e9c0 1300 	strd	r1, r3, [r0]
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <rand+0x70>)
 800067a:	2100      	movs	r1, #0
 800067c:	6083      	str	r3, [r0, #8]
 800067e:	230b      	movs	r3, #11
 8000680:	8183      	strh	r3, [r0, #12]
 8000682:	2001      	movs	r0, #1
 8000684:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8000688:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800068a:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <rand+0x74>)
 800068c:	6920      	ldr	r0, [r4, #16]
 800068e:	6963      	ldr	r3, [r4, #20]
 8000690:	4342      	muls	r2, r0
 8000692:	490d      	ldr	r1, [pc, #52]	; (80006c8 <rand+0x78>)
 8000694:	fb01 2203 	mla	r2, r1, r3, r2
 8000698:	fba0 0101 	umull	r0, r1, r0, r1
 800069c:	1c43      	adds	r3, r0, #1
 800069e:	eb42 0001 	adc.w	r0, r2, r1
 80006a2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80006a6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80006aa:	bd10      	pop	{r4, pc}
 80006ac:	20000048 	.word	0x20000048
 80006b0:	080017d4 	.word	0x080017d4
 80006b4:	080017eb 	.word	0x080017eb
 80006b8:	abcd330e 	.word	0xabcd330e
 80006bc:	e66d1234 	.word	0xe66d1234
 80006c0:	0005deec 	.word	0x0005deec
 80006c4:	5851f42d 	.word	0x5851f42d
 80006c8:	4c957f2d 	.word	0x4c957f2d

080006cc <__assert_func>:
 80006cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80006ce:	4614      	mov	r4, r2
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <__assert_func+0x2c>)
 80006d4:	4605      	mov	r5, r0
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	68d8      	ldr	r0, [r3, #12]
 80006da:	b14c      	cbz	r4, 80006f0 <__assert_func+0x24>
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <__assert_func+0x30>)
 80006de:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80006e2:	9100      	str	r1, [sp, #0]
 80006e4:	462b      	mov	r3, r5
 80006e6:	4906      	ldr	r1, [pc, #24]	; (8000700 <__assert_func+0x34>)
 80006e8:	f000 f8e4 	bl	80008b4 <fiprintf>
 80006ec:	f000 fe56 	bl	800139c <abort>
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <__assert_func+0x38>)
 80006f2:	461c      	mov	r4, r3
 80006f4:	e7f3      	b.n	80006de <__assert_func+0x12>
 80006f6:	bf00      	nop
 80006f8:	20000048 	.word	0x20000048
 80006fc:	08001846 	.word	0x08001846
 8000700:	08001853 	.word	0x08001853
 8000704:	08001881 	.word	0x08001881

08000708 <std>:
 8000708:	2300      	movs	r3, #0
 800070a:	b510      	push	{r4, lr}
 800070c:	4604      	mov	r4, r0
 800070e:	e9c0 3300 	strd	r3, r3, [r0]
 8000712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000716:	6083      	str	r3, [r0, #8]
 8000718:	8181      	strh	r1, [r0, #12]
 800071a:	6643      	str	r3, [r0, #100]	; 0x64
 800071c:	81c2      	strh	r2, [r0, #14]
 800071e:	6183      	str	r3, [r0, #24]
 8000720:	4619      	mov	r1, r3
 8000722:	2208      	movs	r2, #8
 8000724:	305c      	adds	r0, #92	; 0x5c
 8000726:	f7ff ff5f 	bl	80005e8 <memset>
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <std+0x38>)
 800072c:	6224      	str	r4, [r4, #32]
 800072e:	6263      	str	r3, [r4, #36]	; 0x24
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <std+0x3c>)
 8000732:	62a3      	str	r3, [r4, #40]	; 0x28
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <std+0x40>)
 8000736:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <std+0x44>)
 800073a:	6323      	str	r3, [r4, #48]	; 0x30
 800073c:	bd10      	pop	{r4, pc}
 800073e:	bf00      	nop
 8000740:	08001171 	.word	0x08001171
 8000744:	08001193 	.word	0x08001193
 8000748:	080011cb 	.word	0x080011cb
 800074c:	080011ef 	.word	0x080011ef

08000750 <_cleanup_r>:
 8000750:	4901      	ldr	r1, [pc, #4]	; (8000758 <_cleanup_r+0x8>)
 8000752:	f000 b8c1 	b.w	80008d8 <_fwalk_reent>
 8000756:	bf00      	nop
 8000758:	080014d1 	.word	0x080014d1

0800075c <__sfmoreglue>:
 800075c:	2268      	movs	r2, #104	; 0x68
 800075e:	b570      	push	{r4, r5, r6, lr}
 8000760:	1e4d      	subs	r5, r1, #1
 8000762:	4355      	muls	r5, r2
 8000764:	460e      	mov	r6, r1
 8000766:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800076a:	f000 f947 	bl	80009fc <_malloc_r>
 800076e:	4604      	mov	r4, r0
 8000770:	b140      	cbz	r0, 8000784 <__sfmoreglue+0x28>
 8000772:	2100      	movs	r1, #0
 8000774:	e9c0 1600 	strd	r1, r6, [r0]
 8000778:	300c      	adds	r0, #12
 800077a:	60a0      	str	r0, [r4, #8]
 800077c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000780:	f7ff ff32 	bl	80005e8 <memset>
 8000784:	4620      	mov	r0, r4
 8000786:	bd70      	pop	{r4, r5, r6, pc}

08000788 <__sfp_lock_acquire>:
 8000788:	4801      	ldr	r0, [pc, #4]	; (8000790 <__sfp_lock_acquire+0x8>)
 800078a:	f000 b8c5 	b.w	8000918 <__retarget_lock_acquire_recursive>
 800078e:	bf00      	nop
 8000790:	200000cd 	.word	0x200000cd

08000794 <__sfp_lock_release>:
 8000794:	4801      	ldr	r0, [pc, #4]	; (800079c <__sfp_lock_release+0x8>)
 8000796:	f000 b8c0 	b.w	800091a <__retarget_lock_release_recursive>
 800079a:	bf00      	nop
 800079c:	200000cd 	.word	0x200000cd

080007a0 <__sinit_lock_acquire>:
 80007a0:	4801      	ldr	r0, [pc, #4]	; (80007a8 <__sinit_lock_acquire+0x8>)
 80007a2:	f000 b8b9 	b.w	8000918 <__retarget_lock_acquire_recursive>
 80007a6:	bf00      	nop
 80007a8:	200000ce 	.word	0x200000ce

080007ac <__sinit_lock_release>:
 80007ac:	4801      	ldr	r0, [pc, #4]	; (80007b4 <__sinit_lock_release+0x8>)
 80007ae:	f000 b8b4 	b.w	800091a <__retarget_lock_release_recursive>
 80007b2:	bf00      	nop
 80007b4:	200000ce 	.word	0x200000ce

080007b8 <__sinit>:
 80007b8:	b510      	push	{r4, lr}
 80007ba:	4604      	mov	r4, r0
 80007bc:	f7ff fff0 	bl	80007a0 <__sinit_lock_acquire>
 80007c0:	69a3      	ldr	r3, [r4, #24]
 80007c2:	b11b      	cbz	r3, 80007cc <__sinit+0x14>
 80007c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007c8:	f7ff bff0 	b.w	80007ac <__sinit_lock_release>
 80007cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80007d0:	6523      	str	r3, [r4, #80]	; 0x50
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <__sinit+0x68>)
 80007d4:	4a13      	ldr	r2, [pc, #76]	; (8000824 <__sinit+0x6c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80007da:	42a3      	cmp	r3, r4
 80007dc:	bf08      	it	eq
 80007de:	2301      	moveq	r3, #1
 80007e0:	4620      	mov	r0, r4
 80007e2:	bf08      	it	eq
 80007e4:	61a3      	streq	r3, [r4, #24]
 80007e6:	f000 f81f 	bl	8000828 <__sfp>
 80007ea:	6060      	str	r0, [r4, #4]
 80007ec:	4620      	mov	r0, r4
 80007ee:	f000 f81b 	bl	8000828 <__sfp>
 80007f2:	60a0      	str	r0, [r4, #8]
 80007f4:	4620      	mov	r0, r4
 80007f6:	f000 f817 	bl	8000828 <__sfp>
 80007fa:	2200      	movs	r2, #0
 80007fc:	2104      	movs	r1, #4
 80007fe:	60e0      	str	r0, [r4, #12]
 8000800:	6860      	ldr	r0, [r4, #4]
 8000802:	f7ff ff81 	bl	8000708 <std>
 8000806:	2201      	movs	r2, #1
 8000808:	2109      	movs	r1, #9
 800080a:	68a0      	ldr	r0, [r4, #8]
 800080c:	f7ff ff7c 	bl	8000708 <std>
 8000810:	2202      	movs	r2, #2
 8000812:	2112      	movs	r1, #18
 8000814:	68e0      	ldr	r0, [r4, #12]
 8000816:	f7ff ff77 	bl	8000708 <std>
 800081a:	2301      	movs	r3, #1
 800081c:	61a3      	str	r3, [r4, #24]
 800081e:	e7d1      	b.n	80007c4 <__sinit+0xc>
 8000820:	080017d0 	.word	0x080017d0
 8000824:	08000751 	.word	0x08000751

08000828 <__sfp>:
 8000828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082a:	4607      	mov	r7, r0
 800082c:	f7ff ffac 	bl	8000788 <__sfp_lock_acquire>
 8000830:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <__sfp+0x84>)
 8000832:	681e      	ldr	r6, [r3, #0]
 8000834:	69b3      	ldr	r3, [r6, #24]
 8000836:	b913      	cbnz	r3, 800083e <__sfp+0x16>
 8000838:	4630      	mov	r0, r6
 800083a:	f7ff ffbd 	bl	80007b8 <__sinit>
 800083e:	3648      	adds	r6, #72	; 0x48
 8000840:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000844:	3b01      	subs	r3, #1
 8000846:	d503      	bpl.n	8000850 <__sfp+0x28>
 8000848:	6833      	ldr	r3, [r6, #0]
 800084a:	b30b      	cbz	r3, 8000890 <__sfp+0x68>
 800084c:	6836      	ldr	r6, [r6, #0]
 800084e:	e7f7      	b.n	8000840 <__sfp+0x18>
 8000850:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000854:	b9d5      	cbnz	r5, 800088c <__sfp+0x64>
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <__sfp+0x88>)
 8000858:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800085c:	60e3      	str	r3, [r4, #12]
 800085e:	6665      	str	r5, [r4, #100]	; 0x64
 8000860:	f000 f859 	bl	8000916 <__retarget_lock_init_recursive>
 8000864:	f7ff ff96 	bl	8000794 <__sfp_lock_release>
 8000868:	2208      	movs	r2, #8
 800086a:	4629      	mov	r1, r5
 800086c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000870:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000874:	6025      	str	r5, [r4, #0]
 8000876:	61a5      	str	r5, [r4, #24]
 8000878:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800087c:	f7ff feb4 	bl	80005e8 <memset>
 8000880:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000884:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000888:	4620      	mov	r0, r4
 800088a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800088c:	3468      	adds	r4, #104	; 0x68
 800088e:	e7d9      	b.n	8000844 <__sfp+0x1c>
 8000890:	2104      	movs	r1, #4
 8000892:	4638      	mov	r0, r7
 8000894:	f7ff ff62 	bl	800075c <__sfmoreglue>
 8000898:	4604      	mov	r4, r0
 800089a:	6030      	str	r0, [r6, #0]
 800089c:	2800      	cmp	r0, #0
 800089e:	d1d5      	bne.n	800084c <__sfp+0x24>
 80008a0:	f7ff ff78 	bl	8000794 <__sfp_lock_release>
 80008a4:	230c      	movs	r3, #12
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	e7ee      	b.n	8000888 <__sfp+0x60>
 80008aa:	bf00      	nop
 80008ac:	080017d0 	.word	0x080017d0
 80008b0:	ffff0001 	.word	0xffff0001

080008b4 <fiprintf>:
 80008b4:	b40e      	push	{r1, r2, r3}
 80008b6:	b503      	push	{r0, r1, lr}
 80008b8:	4601      	mov	r1, r0
 80008ba:	ab03      	add	r3, sp, #12
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <fiprintf+0x20>)
 80008be:	f853 2b04 	ldr.w	r2, [r3], #4
 80008c2:	6800      	ldr	r0, [r0, #0]
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	f000 f935 	bl	8000b34 <_vfiprintf_r>
 80008ca:	b002      	add	sp, #8
 80008cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80008d0:	b003      	add	sp, #12
 80008d2:	4770      	bx	lr
 80008d4:	20000048 	.word	0x20000048

080008d8 <_fwalk_reent>:
 80008d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008dc:	4606      	mov	r6, r0
 80008de:	4688      	mov	r8, r1
 80008e0:	2700      	movs	r7, #0
 80008e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80008e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80008ea:	f1b9 0901 	subs.w	r9, r9, #1
 80008ee:	d505      	bpl.n	80008fc <_fwalk_reent+0x24>
 80008f0:	6824      	ldr	r4, [r4, #0]
 80008f2:	2c00      	cmp	r4, #0
 80008f4:	d1f7      	bne.n	80008e6 <_fwalk_reent+0xe>
 80008f6:	4638      	mov	r0, r7
 80008f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008fc:	89ab      	ldrh	r3, [r5, #12]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d907      	bls.n	8000912 <_fwalk_reent+0x3a>
 8000902:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000906:	3301      	adds	r3, #1
 8000908:	d003      	beq.n	8000912 <_fwalk_reent+0x3a>
 800090a:	4629      	mov	r1, r5
 800090c:	4630      	mov	r0, r6
 800090e:	47c0      	blx	r8
 8000910:	4307      	orrs	r7, r0
 8000912:	3568      	adds	r5, #104	; 0x68
 8000914:	e7e9      	b.n	80008ea <_fwalk_reent+0x12>

08000916 <__retarget_lock_init_recursive>:
 8000916:	4770      	bx	lr

08000918 <__retarget_lock_acquire_recursive>:
 8000918:	4770      	bx	lr

0800091a <__retarget_lock_release_recursive>:
 800091a:	4770      	bx	lr

0800091c <malloc>:
 800091c:	4b02      	ldr	r3, [pc, #8]	; (8000928 <malloc+0xc>)
 800091e:	4601      	mov	r1, r0
 8000920:	6818      	ldr	r0, [r3, #0]
 8000922:	f000 b86b 	b.w	80009fc <_malloc_r>
 8000926:	bf00      	nop
 8000928:	20000048 	.word	0x20000048

0800092c <_free_r>:
 800092c:	b538      	push	{r3, r4, r5, lr}
 800092e:	4605      	mov	r5, r0
 8000930:	2900      	cmp	r1, #0
 8000932:	d040      	beq.n	80009b6 <_free_r+0x8a>
 8000934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000938:	1f0c      	subs	r4, r1, #4
 800093a:	2b00      	cmp	r3, #0
 800093c:	bfb8      	it	lt
 800093e:	18e4      	addlt	r4, r4, r3
 8000940:	f000 fe88 	bl	8001654 <__malloc_lock>
 8000944:	4a1c      	ldr	r2, [pc, #112]	; (80009b8 <_free_r+0x8c>)
 8000946:	6813      	ldr	r3, [r2, #0]
 8000948:	b933      	cbnz	r3, 8000958 <_free_r+0x2c>
 800094a:	6063      	str	r3, [r4, #4]
 800094c:	6014      	str	r4, [r2, #0]
 800094e:	4628      	mov	r0, r5
 8000950:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000954:	f000 be84 	b.w	8001660 <__malloc_unlock>
 8000958:	42a3      	cmp	r3, r4
 800095a:	d908      	bls.n	800096e <_free_r+0x42>
 800095c:	6820      	ldr	r0, [r4, #0]
 800095e:	1821      	adds	r1, r4, r0
 8000960:	428b      	cmp	r3, r1
 8000962:	bf01      	itttt	eq
 8000964:	6819      	ldreq	r1, [r3, #0]
 8000966:	685b      	ldreq	r3, [r3, #4]
 8000968:	1809      	addeq	r1, r1, r0
 800096a:	6021      	streq	r1, [r4, #0]
 800096c:	e7ed      	b.n	800094a <_free_r+0x1e>
 800096e:	461a      	mov	r2, r3
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	b10b      	cbz	r3, 8000978 <_free_r+0x4c>
 8000974:	42a3      	cmp	r3, r4
 8000976:	d9fa      	bls.n	800096e <_free_r+0x42>
 8000978:	6811      	ldr	r1, [r2, #0]
 800097a:	1850      	adds	r0, r2, r1
 800097c:	42a0      	cmp	r0, r4
 800097e:	d10b      	bne.n	8000998 <_free_r+0x6c>
 8000980:	6820      	ldr	r0, [r4, #0]
 8000982:	4401      	add	r1, r0
 8000984:	1850      	adds	r0, r2, r1
 8000986:	4283      	cmp	r3, r0
 8000988:	6011      	str	r1, [r2, #0]
 800098a:	d1e0      	bne.n	800094e <_free_r+0x22>
 800098c:	6818      	ldr	r0, [r3, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	4401      	add	r1, r0
 8000992:	6011      	str	r1, [r2, #0]
 8000994:	6053      	str	r3, [r2, #4]
 8000996:	e7da      	b.n	800094e <_free_r+0x22>
 8000998:	d902      	bls.n	80009a0 <_free_r+0x74>
 800099a:	230c      	movs	r3, #12
 800099c:	602b      	str	r3, [r5, #0]
 800099e:	e7d6      	b.n	800094e <_free_r+0x22>
 80009a0:	6820      	ldr	r0, [r4, #0]
 80009a2:	1821      	adds	r1, r4, r0
 80009a4:	428b      	cmp	r3, r1
 80009a6:	bf01      	itttt	eq
 80009a8:	6819      	ldreq	r1, [r3, #0]
 80009aa:	685b      	ldreq	r3, [r3, #4]
 80009ac:	1809      	addeq	r1, r1, r0
 80009ae:	6021      	streq	r1, [r4, #0]
 80009b0:	6063      	str	r3, [r4, #4]
 80009b2:	6054      	str	r4, [r2, #4]
 80009b4:	e7cb      	b.n	800094e <_free_r+0x22>
 80009b6:	bd38      	pop	{r3, r4, r5, pc}
 80009b8:	200000d0 	.word	0x200000d0

080009bc <sbrk_aligned>:
 80009bc:	b570      	push	{r4, r5, r6, lr}
 80009be:	4e0e      	ldr	r6, [pc, #56]	; (80009f8 <sbrk_aligned+0x3c>)
 80009c0:	460c      	mov	r4, r1
 80009c2:	6831      	ldr	r1, [r6, #0]
 80009c4:	4605      	mov	r5, r0
 80009c6:	b911      	cbnz	r1, 80009ce <sbrk_aligned+0x12>
 80009c8:	f000 fbc2 	bl	8001150 <_sbrk_r>
 80009cc:	6030      	str	r0, [r6, #0]
 80009ce:	4621      	mov	r1, r4
 80009d0:	4628      	mov	r0, r5
 80009d2:	f000 fbbd 	bl	8001150 <_sbrk_r>
 80009d6:	1c43      	adds	r3, r0, #1
 80009d8:	d00a      	beq.n	80009f0 <sbrk_aligned+0x34>
 80009da:	1cc4      	adds	r4, r0, #3
 80009dc:	f024 0403 	bic.w	r4, r4, #3
 80009e0:	42a0      	cmp	r0, r4
 80009e2:	d007      	beq.n	80009f4 <sbrk_aligned+0x38>
 80009e4:	1a21      	subs	r1, r4, r0
 80009e6:	4628      	mov	r0, r5
 80009e8:	f000 fbb2 	bl	8001150 <_sbrk_r>
 80009ec:	3001      	adds	r0, #1
 80009ee:	d101      	bne.n	80009f4 <sbrk_aligned+0x38>
 80009f0:	f04f 34ff 	mov.w	r4, #4294967295
 80009f4:	4620      	mov	r0, r4
 80009f6:	bd70      	pop	{r4, r5, r6, pc}
 80009f8:	200000d4 	.word	0x200000d4

080009fc <_malloc_r>:
 80009fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a00:	1ccd      	adds	r5, r1, #3
 8000a02:	f025 0503 	bic.w	r5, r5, #3
 8000a06:	3508      	adds	r5, #8
 8000a08:	2d0c      	cmp	r5, #12
 8000a0a:	bf38      	it	cc
 8000a0c:	250c      	movcc	r5, #12
 8000a0e:	2d00      	cmp	r5, #0
 8000a10:	4607      	mov	r7, r0
 8000a12:	db01      	blt.n	8000a18 <_malloc_r+0x1c>
 8000a14:	42a9      	cmp	r1, r5
 8000a16:	d905      	bls.n	8000a24 <_malloc_r+0x28>
 8000a18:	230c      	movs	r3, #12
 8000a1a:	2600      	movs	r6, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4630      	mov	r0, r6
 8000a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a24:	4e2e      	ldr	r6, [pc, #184]	; (8000ae0 <_malloc_r+0xe4>)
 8000a26:	f000 fe15 	bl	8001654 <__malloc_lock>
 8000a2a:	6833      	ldr	r3, [r6, #0]
 8000a2c:	461c      	mov	r4, r3
 8000a2e:	bb34      	cbnz	r4, 8000a7e <_malloc_r+0x82>
 8000a30:	4629      	mov	r1, r5
 8000a32:	4638      	mov	r0, r7
 8000a34:	f7ff ffc2 	bl	80009bc <sbrk_aligned>
 8000a38:	1c43      	adds	r3, r0, #1
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	d14d      	bne.n	8000ada <_malloc_r+0xde>
 8000a3e:	6834      	ldr	r4, [r6, #0]
 8000a40:	4626      	mov	r6, r4
 8000a42:	2e00      	cmp	r6, #0
 8000a44:	d140      	bne.n	8000ac8 <_malloc_r+0xcc>
 8000a46:	6823      	ldr	r3, [r4, #0]
 8000a48:	4631      	mov	r1, r6
 8000a4a:	4638      	mov	r0, r7
 8000a4c:	eb04 0803 	add.w	r8, r4, r3
 8000a50:	f000 fb7e 	bl	8001150 <_sbrk_r>
 8000a54:	4580      	cmp	r8, r0
 8000a56:	d13a      	bne.n	8000ace <_malloc_r+0xd2>
 8000a58:	6821      	ldr	r1, [r4, #0]
 8000a5a:	3503      	adds	r5, #3
 8000a5c:	1a6d      	subs	r5, r5, r1
 8000a5e:	f025 0503 	bic.w	r5, r5, #3
 8000a62:	3508      	adds	r5, #8
 8000a64:	2d0c      	cmp	r5, #12
 8000a66:	bf38      	it	cc
 8000a68:	250c      	movcc	r5, #12
 8000a6a:	4638      	mov	r0, r7
 8000a6c:	4629      	mov	r1, r5
 8000a6e:	f7ff ffa5 	bl	80009bc <sbrk_aligned>
 8000a72:	3001      	adds	r0, #1
 8000a74:	d02b      	beq.n	8000ace <_malloc_r+0xd2>
 8000a76:	6823      	ldr	r3, [r4, #0]
 8000a78:	442b      	add	r3, r5
 8000a7a:	6023      	str	r3, [r4, #0]
 8000a7c:	e00e      	b.n	8000a9c <_malloc_r+0xa0>
 8000a7e:	6822      	ldr	r2, [r4, #0]
 8000a80:	1b52      	subs	r2, r2, r5
 8000a82:	d41e      	bmi.n	8000ac2 <_malloc_r+0xc6>
 8000a84:	2a0b      	cmp	r2, #11
 8000a86:	d916      	bls.n	8000ab6 <_malloc_r+0xba>
 8000a88:	1961      	adds	r1, r4, r5
 8000a8a:	42a3      	cmp	r3, r4
 8000a8c:	6025      	str	r5, [r4, #0]
 8000a8e:	bf18      	it	ne
 8000a90:	6059      	strne	r1, [r3, #4]
 8000a92:	6863      	ldr	r3, [r4, #4]
 8000a94:	bf08      	it	eq
 8000a96:	6031      	streq	r1, [r6, #0]
 8000a98:	5162      	str	r2, [r4, r5]
 8000a9a:	604b      	str	r3, [r1, #4]
 8000a9c:	4638      	mov	r0, r7
 8000a9e:	f104 060b 	add.w	r6, r4, #11
 8000aa2:	f000 fddd 	bl	8001660 <__malloc_unlock>
 8000aa6:	f026 0607 	bic.w	r6, r6, #7
 8000aaa:	1d23      	adds	r3, r4, #4
 8000aac:	1af2      	subs	r2, r6, r3
 8000aae:	d0b6      	beq.n	8000a1e <_malloc_r+0x22>
 8000ab0:	1b9b      	subs	r3, r3, r6
 8000ab2:	50a3      	str	r3, [r4, r2]
 8000ab4:	e7b3      	b.n	8000a1e <_malloc_r+0x22>
 8000ab6:	6862      	ldr	r2, [r4, #4]
 8000ab8:	42a3      	cmp	r3, r4
 8000aba:	bf0c      	ite	eq
 8000abc:	6032      	streq	r2, [r6, #0]
 8000abe:	605a      	strne	r2, [r3, #4]
 8000ac0:	e7ec      	b.n	8000a9c <_malloc_r+0xa0>
 8000ac2:	4623      	mov	r3, r4
 8000ac4:	6864      	ldr	r4, [r4, #4]
 8000ac6:	e7b2      	b.n	8000a2e <_malloc_r+0x32>
 8000ac8:	4634      	mov	r4, r6
 8000aca:	6876      	ldr	r6, [r6, #4]
 8000acc:	e7b9      	b.n	8000a42 <_malloc_r+0x46>
 8000ace:	230c      	movs	r3, #12
 8000ad0:	4638      	mov	r0, r7
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	f000 fdc4 	bl	8001660 <__malloc_unlock>
 8000ad8:	e7a1      	b.n	8000a1e <_malloc_r+0x22>
 8000ada:	6025      	str	r5, [r4, #0]
 8000adc:	e7de      	b.n	8000a9c <_malloc_r+0xa0>
 8000ade:	bf00      	nop
 8000ae0:	200000d0 	.word	0x200000d0

08000ae4 <__sfputc_r>:
 8000ae4:	6893      	ldr	r3, [r2, #8]
 8000ae6:	b410      	push	{r4}
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	6093      	str	r3, [r2, #8]
 8000aee:	da07      	bge.n	8000b00 <__sfputc_r+0x1c>
 8000af0:	6994      	ldr	r4, [r2, #24]
 8000af2:	42a3      	cmp	r3, r4
 8000af4:	db01      	blt.n	8000afa <__sfputc_r+0x16>
 8000af6:	290a      	cmp	r1, #10
 8000af8:	d102      	bne.n	8000b00 <__sfputc_r+0x1c>
 8000afa:	bc10      	pop	{r4}
 8000afc:	f000 bb7c 	b.w	80011f8 <__swbuf_r>
 8000b00:	6813      	ldr	r3, [r2, #0]
 8000b02:	1c58      	adds	r0, r3, #1
 8000b04:	6010      	str	r0, [r2, #0]
 8000b06:	7019      	strb	r1, [r3, #0]
 8000b08:	4608      	mov	r0, r1
 8000b0a:	bc10      	pop	{r4}
 8000b0c:	4770      	bx	lr

08000b0e <__sfputs_r>:
 8000b0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b10:	4606      	mov	r6, r0
 8000b12:	460f      	mov	r7, r1
 8000b14:	4614      	mov	r4, r2
 8000b16:	18d5      	adds	r5, r2, r3
 8000b18:	42ac      	cmp	r4, r5
 8000b1a:	d101      	bne.n	8000b20 <__sfputs_r+0x12>
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	e007      	b.n	8000b30 <__sfputs_r+0x22>
 8000b20:	463a      	mov	r2, r7
 8000b22:	4630      	mov	r0, r6
 8000b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b28:	f7ff ffdc 	bl	8000ae4 <__sfputc_r>
 8000b2c:	1c43      	adds	r3, r0, #1
 8000b2e:	d1f3      	bne.n	8000b18 <__sfputs_r+0xa>
 8000b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b34 <_vfiprintf_r>:
 8000b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b38:	460d      	mov	r5, r1
 8000b3a:	4614      	mov	r4, r2
 8000b3c:	4698      	mov	r8, r3
 8000b3e:	4606      	mov	r6, r0
 8000b40:	b09d      	sub	sp, #116	; 0x74
 8000b42:	b118      	cbz	r0, 8000b4c <_vfiprintf_r+0x18>
 8000b44:	6983      	ldr	r3, [r0, #24]
 8000b46:	b90b      	cbnz	r3, 8000b4c <_vfiprintf_r+0x18>
 8000b48:	f7ff fe36 	bl	80007b8 <__sinit>
 8000b4c:	4b89      	ldr	r3, [pc, #548]	; (8000d74 <_vfiprintf_r+0x240>)
 8000b4e:	429d      	cmp	r5, r3
 8000b50:	d11b      	bne.n	8000b8a <_vfiprintf_r+0x56>
 8000b52:	6875      	ldr	r5, [r6, #4]
 8000b54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b56:	07d9      	lsls	r1, r3, #31
 8000b58:	d405      	bmi.n	8000b66 <_vfiprintf_r+0x32>
 8000b5a:	89ab      	ldrh	r3, [r5, #12]
 8000b5c:	059a      	lsls	r2, r3, #22
 8000b5e:	d402      	bmi.n	8000b66 <_vfiprintf_r+0x32>
 8000b60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b62:	f7ff fed9 	bl	8000918 <__retarget_lock_acquire_recursive>
 8000b66:	89ab      	ldrh	r3, [r5, #12]
 8000b68:	071b      	lsls	r3, r3, #28
 8000b6a:	d501      	bpl.n	8000b70 <_vfiprintf_r+0x3c>
 8000b6c:	692b      	ldr	r3, [r5, #16]
 8000b6e:	b9eb      	cbnz	r3, 8000bac <_vfiprintf_r+0x78>
 8000b70:	4629      	mov	r1, r5
 8000b72:	4630      	mov	r0, r6
 8000b74:	f000 fba4 	bl	80012c0 <__swsetup_r>
 8000b78:	b1c0      	cbz	r0, 8000bac <_vfiprintf_r+0x78>
 8000b7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b7c:	07dc      	lsls	r4, r3, #31
 8000b7e:	d50e      	bpl.n	8000b9e <_vfiprintf_r+0x6a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	b01d      	add	sp, #116	; 0x74
 8000b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b8a:	4b7b      	ldr	r3, [pc, #492]	; (8000d78 <_vfiprintf_r+0x244>)
 8000b8c:	429d      	cmp	r5, r3
 8000b8e:	d101      	bne.n	8000b94 <_vfiprintf_r+0x60>
 8000b90:	68b5      	ldr	r5, [r6, #8]
 8000b92:	e7df      	b.n	8000b54 <_vfiprintf_r+0x20>
 8000b94:	4b79      	ldr	r3, [pc, #484]	; (8000d7c <_vfiprintf_r+0x248>)
 8000b96:	429d      	cmp	r5, r3
 8000b98:	bf08      	it	eq
 8000b9a:	68f5      	ldreq	r5, [r6, #12]
 8000b9c:	e7da      	b.n	8000b54 <_vfiprintf_r+0x20>
 8000b9e:	89ab      	ldrh	r3, [r5, #12]
 8000ba0:	0598      	lsls	r0, r3, #22
 8000ba2:	d4ed      	bmi.n	8000b80 <_vfiprintf_r+0x4c>
 8000ba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ba6:	f7ff feb8 	bl	800091a <__retarget_lock_release_recursive>
 8000baa:	e7e9      	b.n	8000b80 <_vfiprintf_r+0x4c>
 8000bac:	2300      	movs	r3, #0
 8000bae:	9309      	str	r3, [sp, #36]	; 0x24
 8000bb0:	2320      	movs	r3, #32
 8000bb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000bb6:	2330      	movs	r3, #48	; 0x30
 8000bb8:	f04f 0901 	mov.w	r9, #1
 8000bbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8000bc0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8000d80 <_vfiprintf_r+0x24c>
 8000bc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000bc8:	4623      	mov	r3, r4
 8000bca:	469a      	mov	sl, r3
 8000bcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000bd0:	b10a      	cbz	r2, 8000bd6 <_vfiprintf_r+0xa2>
 8000bd2:	2a25      	cmp	r2, #37	; 0x25
 8000bd4:	d1f9      	bne.n	8000bca <_vfiprintf_r+0x96>
 8000bd6:	ebba 0b04 	subs.w	fp, sl, r4
 8000bda:	d00b      	beq.n	8000bf4 <_vfiprintf_r+0xc0>
 8000bdc:	465b      	mov	r3, fp
 8000bde:	4622      	mov	r2, r4
 8000be0:	4629      	mov	r1, r5
 8000be2:	4630      	mov	r0, r6
 8000be4:	f7ff ff93 	bl	8000b0e <__sfputs_r>
 8000be8:	3001      	adds	r0, #1
 8000bea:	f000 80aa 	beq.w	8000d42 <_vfiprintf_r+0x20e>
 8000bee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000bf0:	445a      	add	r2, fp
 8000bf2:	9209      	str	r2, [sp, #36]	; 0x24
 8000bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f000 80a2 	beq.w	8000d42 <_vfiprintf_r+0x20e>
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295
 8000c04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c08:	f10a 0a01 	add.w	sl, sl, #1
 8000c0c:	9304      	str	r3, [sp, #16]
 8000c0e:	9307      	str	r3, [sp, #28]
 8000c10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c14:	931a      	str	r3, [sp, #104]	; 0x68
 8000c16:	4654      	mov	r4, sl
 8000c18:	2205      	movs	r2, #5
 8000c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c1e:	4858      	ldr	r0, [pc, #352]	; (8000d80 <_vfiprintf_r+0x24c>)
 8000c20:	f000 fd0a 	bl	8001638 <memchr>
 8000c24:	9a04      	ldr	r2, [sp, #16]
 8000c26:	b9d8      	cbnz	r0, 8000c60 <_vfiprintf_r+0x12c>
 8000c28:	06d1      	lsls	r1, r2, #27
 8000c2a:	bf44      	itt	mi
 8000c2c:	2320      	movmi	r3, #32
 8000c2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c32:	0713      	lsls	r3, r2, #28
 8000c34:	bf44      	itt	mi
 8000c36:	232b      	movmi	r3, #43	; 0x2b
 8000c38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8000c40:	2b2a      	cmp	r3, #42	; 0x2a
 8000c42:	d015      	beq.n	8000c70 <_vfiprintf_r+0x13c>
 8000c44:	4654      	mov	r4, sl
 8000c46:	2000      	movs	r0, #0
 8000c48:	f04f 0c0a 	mov.w	ip, #10
 8000c4c:	9a07      	ldr	r2, [sp, #28]
 8000c4e:	4621      	mov	r1, r4
 8000c50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c54:	3b30      	subs	r3, #48	; 0x30
 8000c56:	2b09      	cmp	r3, #9
 8000c58:	d94e      	bls.n	8000cf8 <_vfiprintf_r+0x1c4>
 8000c5a:	b1b0      	cbz	r0, 8000c8a <_vfiprintf_r+0x156>
 8000c5c:	9207      	str	r2, [sp, #28]
 8000c5e:	e014      	b.n	8000c8a <_vfiprintf_r+0x156>
 8000c60:	eba0 0308 	sub.w	r3, r0, r8
 8000c64:	fa09 f303 	lsl.w	r3, r9, r3
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	46a2      	mov	sl, r4
 8000c6c:	9304      	str	r3, [sp, #16]
 8000c6e:	e7d2      	b.n	8000c16 <_vfiprintf_r+0xe2>
 8000c70:	9b03      	ldr	r3, [sp, #12]
 8000c72:	1d19      	adds	r1, r3, #4
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	9103      	str	r1, [sp, #12]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	bfbb      	ittet	lt
 8000c7c:	425b      	neglt	r3, r3
 8000c7e:	f042 0202 	orrlt.w	r2, r2, #2
 8000c82:	9307      	strge	r3, [sp, #28]
 8000c84:	9307      	strlt	r3, [sp, #28]
 8000c86:	bfb8      	it	lt
 8000c88:	9204      	strlt	r2, [sp, #16]
 8000c8a:	7823      	ldrb	r3, [r4, #0]
 8000c8c:	2b2e      	cmp	r3, #46	; 0x2e
 8000c8e:	d10c      	bne.n	8000caa <_vfiprintf_r+0x176>
 8000c90:	7863      	ldrb	r3, [r4, #1]
 8000c92:	2b2a      	cmp	r3, #42	; 0x2a
 8000c94:	d135      	bne.n	8000d02 <_vfiprintf_r+0x1ce>
 8000c96:	9b03      	ldr	r3, [sp, #12]
 8000c98:	3402      	adds	r4, #2
 8000c9a:	1d1a      	adds	r2, r3, #4
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	9203      	str	r2, [sp, #12]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	bfb8      	it	lt
 8000ca4:	f04f 33ff 	movlt.w	r3, #4294967295
 8000ca8:	9305      	str	r3, [sp, #20]
 8000caa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8000d84 <_vfiprintf_r+0x250>
 8000cae:	2203      	movs	r2, #3
 8000cb0:	4650      	mov	r0, sl
 8000cb2:	7821      	ldrb	r1, [r4, #0]
 8000cb4:	f000 fcc0 	bl	8001638 <memchr>
 8000cb8:	b140      	cbz	r0, 8000ccc <_vfiprintf_r+0x198>
 8000cba:	2340      	movs	r3, #64	; 0x40
 8000cbc:	eba0 000a 	sub.w	r0, r0, sl
 8000cc0:	fa03 f000 	lsl.w	r0, r3, r0
 8000cc4:	9b04      	ldr	r3, [sp, #16]
 8000cc6:	3401      	adds	r4, #1
 8000cc8:	4303      	orrs	r3, r0
 8000cca:	9304      	str	r3, [sp, #16]
 8000ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cd0:	2206      	movs	r2, #6
 8000cd2:	482d      	ldr	r0, [pc, #180]	; (8000d88 <_vfiprintf_r+0x254>)
 8000cd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000cd8:	f000 fcae 	bl	8001638 <memchr>
 8000cdc:	2800      	cmp	r0, #0
 8000cde:	d03f      	beq.n	8000d60 <_vfiprintf_r+0x22c>
 8000ce0:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <_vfiprintf_r+0x258>)
 8000ce2:	bb1b      	cbnz	r3, 8000d2c <_vfiprintf_r+0x1f8>
 8000ce4:	9b03      	ldr	r3, [sp, #12]
 8000ce6:	3307      	adds	r3, #7
 8000ce8:	f023 0307 	bic.w	r3, r3, #7
 8000cec:	3308      	adds	r3, #8
 8000cee:	9303      	str	r3, [sp, #12]
 8000cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000cf2:	443b      	add	r3, r7
 8000cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8000cf6:	e767      	b.n	8000bc8 <_vfiprintf_r+0x94>
 8000cf8:	460c      	mov	r4, r1
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d00:	e7a5      	b.n	8000c4e <_vfiprintf_r+0x11a>
 8000d02:	2300      	movs	r3, #0
 8000d04:	f04f 0c0a 	mov.w	ip, #10
 8000d08:	4619      	mov	r1, r3
 8000d0a:	3401      	adds	r4, #1
 8000d0c:	9305      	str	r3, [sp, #20]
 8000d0e:	4620      	mov	r0, r4
 8000d10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d14:	3a30      	subs	r2, #48	; 0x30
 8000d16:	2a09      	cmp	r2, #9
 8000d18:	d903      	bls.n	8000d22 <_vfiprintf_r+0x1ee>
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d0c5      	beq.n	8000caa <_vfiprintf_r+0x176>
 8000d1e:	9105      	str	r1, [sp, #20]
 8000d20:	e7c3      	b.n	8000caa <_vfiprintf_r+0x176>
 8000d22:	4604      	mov	r4, r0
 8000d24:	2301      	movs	r3, #1
 8000d26:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d2a:	e7f0      	b.n	8000d0e <_vfiprintf_r+0x1da>
 8000d2c:	ab03      	add	r3, sp, #12
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	462a      	mov	r2, r5
 8000d32:	4630      	mov	r0, r6
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <_vfiprintf_r+0x25c>)
 8000d36:	a904      	add	r1, sp, #16
 8000d38:	f3af 8000 	nop.w
 8000d3c:	4607      	mov	r7, r0
 8000d3e:	1c78      	adds	r0, r7, #1
 8000d40:	d1d6      	bne.n	8000cf0 <_vfiprintf_r+0x1bc>
 8000d42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d44:	07d9      	lsls	r1, r3, #31
 8000d46:	d405      	bmi.n	8000d54 <_vfiprintf_r+0x220>
 8000d48:	89ab      	ldrh	r3, [r5, #12]
 8000d4a:	059a      	lsls	r2, r3, #22
 8000d4c:	d402      	bmi.n	8000d54 <_vfiprintf_r+0x220>
 8000d4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d50:	f7ff fde3 	bl	800091a <__retarget_lock_release_recursive>
 8000d54:	89ab      	ldrh	r3, [r5, #12]
 8000d56:	065b      	lsls	r3, r3, #25
 8000d58:	f53f af12 	bmi.w	8000b80 <_vfiprintf_r+0x4c>
 8000d5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d5e:	e711      	b.n	8000b84 <_vfiprintf_r+0x50>
 8000d60:	ab03      	add	r3, sp, #12
 8000d62:	9300      	str	r3, [sp, #0]
 8000d64:	462a      	mov	r2, r5
 8000d66:	4630      	mov	r0, r6
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <_vfiprintf_r+0x25c>)
 8000d6a:	a904      	add	r1, sp, #16
 8000d6c:	f000 f882 	bl	8000e74 <_printf_i>
 8000d70:	e7e4      	b.n	8000d3c <_vfiprintf_r+0x208>
 8000d72:	bf00      	nop
 8000d74:	080018a4 	.word	0x080018a4
 8000d78:	080018c4 	.word	0x080018c4
 8000d7c:	08001884 	.word	0x08001884
 8000d80:	080018e4 	.word	0x080018e4
 8000d84:	080018ea 	.word	0x080018ea
 8000d88:	080018ee 	.word	0x080018ee
 8000d8c:	00000000 	.word	0x00000000
 8000d90:	08000b0f 	.word	0x08000b0f

08000d94 <_printf_common>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	4616      	mov	r6, r2
 8000d9a:	4699      	mov	r9, r3
 8000d9c:	688a      	ldr	r2, [r1, #8]
 8000d9e:	690b      	ldr	r3, [r1, #16]
 8000da0:	4607      	mov	r7, r0
 8000da2:	4293      	cmp	r3, r2
 8000da4:	bfb8      	it	lt
 8000da6:	4613      	movlt	r3, r2
 8000da8:	6033      	str	r3, [r6, #0]
 8000daa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000dae:	460c      	mov	r4, r1
 8000db0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000db4:	b10a      	cbz	r2, 8000dba <_printf_common+0x26>
 8000db6:	3301      	adds	r3, #1
 8000db8:	6033      	str	r3, [r6, #0]
 8000dba:	6823      	ldr	r3, [r4, #0]
 8000dbc:	0699      	lsls	r1, r3, #26
 8000dbe:	bf42      	ittt	mi
 8000dc0:	6833      	ldrmi	r3, [r6, #0]
 8000dc2:	3302      	addmi	r3, #2
 8000dc4:	6033      	strmi	r3, [r6, #0]
 8000dc6:	6825      	ldr	r5, [r4, #0]
 8000dc8:	f015 0506 	ands.w	r5, r5, #6
 8000dcc:	d106      	bne.n	8000ddc <_printf_common+0x48>
 8000dce:	f104 0a19 	add.w	sl, r4, #25
 8000dd2:	68e3      	ldr	r3, [r4, #12]
 8000dd4:	6832      	ldr	r2, [r6, #0]
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	42ab      	cmp	r3, r5
 8000dda:	dc28      	bgt.n	8000e2e <_printf_common+0x9a>
 8000ddc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000de0:	1e13      	subs	r3, r2, #0
 8000de2:	6822      	ldr	r2, [r4, #0]
 8000de4:	bf18      	it	ne
 8000de6:	2301      	movne	r3, #1
 8000de8:	0692      	lsls	r2, r2, #26
 8000dea:	d42d      	bmi.n	8000e48 <_printf_common+0xb4>
 8000dec:	4649      	mov	r1, r9
 8000dee:	4638      	mov	r0, r7
 8000df0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000df4:	47c0      	blx	r8
 8000df6:	3001      	adds	r0, #1
 8000df8:	d020      	beq.n	8000e3c <_printf_common+0xa8>
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	68e5      	ldr	r5, [r4, #12]
 8000dfe:	f003 0306 	and.w	r3, r3, #6
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	bf18      	it	ne
 8000e06:	2500      	movne	r5, #0
 8000e08:	6832      	ldr	r2, [r6, #0]
 8000e0a:	f04f 0600 	mov.w	r6, #0
 8000e0e:	68a3      	ldr	r3, [r4, #8]
 8000e10:	bf08      	it	eq
 8000e12:	1aad      	subeq	r5, r5, r2
 8000e14:	6922      	ldr	r2, [r4, #16]
 8000e16:	bf08      	it	eq
 8000e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	bfc4      	itt	gt
 8000e20:	1a9b      	subgt	r3, r3, r2
 8000e22:	18ed      	addgt	r5, r5, r3
 8000e24:	341a      	adds	r4, #26
 8000e26:	42b5      	cmp	r5, r6
 8000e28:	d11a      	bne.n	8000e60 <_printf_common+0xcc>
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	e008      	b.n	8000e40 <_printf_common+0xac>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	4652      	mov	r2, sl
 8000e32:	4649      	mov	r1, r9
 8000e34:	4638      	mov	r0, r7
 8000e36:	47c0      	blx	r8
 8000e38:	3001      	adds	r0, #1
 8000e3a:	d103      	bne.n	8000e44 <_printf_common+0xb0>
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e44:	3501      	adds	r5, #1
 8000e46:	e7c4      	b.n	8000dd2 <_printf_common+0x3e>
 8000e48:	2030      	movs	r0, #48	; 0x30
 8000e4a:	18e1      	adds	r1, r4, r3
 8000e4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000e50:	1c5a      	adds	r2, r3, #1
 8000e52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000e56:	4422      	add	r2, r4
 8000e58:	3302      	adds	r3, #2
 8000e5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000e5e:	e7c5      	b.n	8000dec <_printf_common+0x58>
 8000e60:	2301      	movs	r3, #1
 8000e62:	4622      	mov	r2, r4
 8000e64:	4649      	mov	r1, r9
 8000e66:	4638      	mov	r0, r7
 8000e68:	47c0      	blx	r8
 8000e6a:	3001      	adds	r0, #1
 8000e6c:	d0e6      	beq.n	8000e3c <_printf_common+0xa8>
 8000e6e:	3601      	adds	r6, #1
 8000e70:	e7d9      	b.n	8000e26 <_printf_common+0x92>
	...

08000e74 <_printf_i>:
 8000e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e78:	7e0f      	ldrb	r7, [r1, #24]
 8000e7a:	4691      	mov	r9, r2
 8000e7c:	2f78      	cmp	r7, #120	; 0x78
 8000e7e:	4680      	mov	r8, r0
 8000e80:	460c      	mov	r4, r1
 8000e82:	469a      	mov	sl, r3
 8000e84:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000e8a:	d807      	bhi.n	8000e9c <_printf_i+0x28>
 8000e8c:	2f62      	cmp	r7, #98	; 0x62
 8000e8e:	d80a      	bhi.n	8000ea6 <_printf_i+0x32>
 8000e90:	2f00      	cmp	r7, #0
 8000e92:	f000 80d9 	beq.w	8001048 <_printf_i+0x1d4>
 8000e96:	2f58      	cmp	r7, #88	; 0x58
 8000e98:	f000 80a4 	beq.w	8000fe4 <_printf_i+0x170>
 8000e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000ea4:	e03a      	b.n	8000f1c <_printf_i+0xa8>
 8000ea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000eaa:	2b15      	cmp	r3, #21
 8000eac:	d8f6      	bhi.n	8000e9c <_printf_i+0x28>
 8000eae:	a101      	add	r1, pc, #4	; (adr r1, 8000eb4 <_printf_i+0x40>)
 8000eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000eb4:	08000f0d 	.word	0x08000f0d
 8000eb8:	08000f21 	.word	0x08000f21
 8000ebc:	08000e9d 	.word	0x08000e9d
 8000ec0:	08000e9d 	.word	0x08000e9d
 8000ec4:	08000e9d 	.word	0x08000e9d
 8000ec8:	08000e9d 	.word	0x08000e9d
 8000ecc:	08000f21 	.word	0x08000f21
 8000ed0:	08000e9d 	.word	0x08000e9d
 8000ed4:	08000e9d 	.word	0x08000e9d
 8000ed8:	08000e9d 	.word	0x08000e9d
 8000edc:	08000e9d 	.word	0x08000e9d
 8000ee0:	0800102f 	.word	0x0800102f
 8000ee4:	08000f51 	.word	0x08000f51
 8000ee8:	08001011 	.word	0x08001011
 8000eec:	08000e9d 	.word	0x08000e9d
 8000ef0:	08000e9d 	.word	0x08000e9d
 8000ef4:	08001051 	.word	0x08001051
 8000ef8:	08000e9d 	.word	0x08000e9d
 8000efc:	08000f51 	.word	0x08000f51
 8000f00:	08000e9d 	.word	0x08000e9d
 8000f04:	08000e9d 	.word	0x08000e9d
 8000f08:	08001019 	.word	0x08001019
 8000f0c:	682b      	ldr	r3, [r5, #0]
 8000f0e:	1d1a      	adds	r2, r3, #4
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	602a      	str	r2, [r5, #0]
 8000f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e0a4      	b.n	800106a <_printf_i+0x1f6>
 8000f20:	6820      	ldr	r0, [r4, #0]
 8000f22:	6829      	ldr	r1, [r5, #0]
 8000f24:	0606      	lsls	r6, r0, #24
 8000f26:	f101 0304 	add.w	r3, r1, #4
 8000f2a:	d50a      	bpl.n	8000f42 <_printf_i+0xce>
 8000f2c:	680e      	ldr	r6, [r1, #0]
 8000f2e:	602b      	str	r3, [r5, #0]
 8000f30:	2e00      	cmp	r6, #0
 8000f32:	da03      	bge.n	8000f3c <_printf_i+0xc8>
 8000f34:	232d      	movs	r3, #45	; 0x2d
 8000f36:	4276      	negs	r6, r6
 8000f38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f3c:	230a      	movs	r3, #10
 8000f3e:	485e      	ldr	r0, [pc, #376]	; (80010b8 <_printf_i+0x244>)
 8000f40:	e019      	b.n	8000f76 <_printf_i+0x102>
 8000f42:	680e      	ldr	r6, [r1, #0]
 8000f44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000f48:	602b      	str	r3, [r5, #0]
 8000f4a:	bf18      	it	ne
 8000f4c:	b236      	sxthne	r6, r6
 8000f4e:	e7ef      	b.n	8000f30 <_printf_i+0xbc>
 8000f50:	682b      	ldr	r3, [r5, #0]
 8000f52:	6820      	ldr	r0, [r4, #0]
 8000f54:	1d19      	adds	r1, r3, #4
 8000f56:	6029      	str	r1, [r5, #0]
 8000f58:	0601      	lsls	r1, r0, #24
 8000f5a:	d501      	bpl.n	8000f60 <_printf_i+0xec>
 8000f5c:	681e      	ldr	r6, [r3, #0]
 8000f5e:	e002      	b.n	8000f66 <_printf_i+0xf2>
 8000f60:	0646      	lsls	r6, r0, #25
 8000f62:	d5fb      	bpl.n	8000f5c <_printf_i+0xe8>
 8000f64:	881e      	ldrh	r6, [r3, #0]
 8000f66:	2f6f      	cmp	r7, #111	; 0x6f
 8000f68:	bf0c      	ite	eq
 8000f6a:	2308      	moveq	r3, #8
 8000f6c:	230a      	movne	r3, #10
 8000f6e:	4852      	ldr	r0, [pc, #328]	; (80010b8 <_printf_i+0x244>)
 8000f70:	2100      	movs	r1, #0
 8000f72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000f76:	6865      	ldr	r5, [r4, #4]
 8000f78:	2d00      	cmp	r5, #0
 8000f7a:	bfa8      	it	ge
 8000f7c:	6821      	ldrge	r1, [r4, #0]
 8000f7e:	60a5      	str	r5, [r4, #8]
 8000f80:	bfa4      	itt	ge
 8000f82:	f021 0104 	bicge.w	r1, r1, #4
 8000f86:	6021      	strge	r1, [r4, #0]
 8000f88:	b90e      	cbnz	r6, 8000f8e <_printf_i+0x11a>
 8000f8a:	2d00      	cmp	r5, #0
 8000f8c:	d04d      	beq.n	800102a <_printf_i+0x1b6>
 8000f8e:	4615      	mov	r5, r2
 8000f90:	fbb6 f1f3 	udiv	r1, r6, r3
 8000f94:	fb03 6711 	mls	r7, r3, r1, r6
 8000f98:	5dc7      	ldrb	r7, [r0, r7]
 8000f9a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000f9e:	4637      	mov	r7, r6
 8000fa0:	42bb      	cmp	r3, r7
 8000fa2:	460e      	mov	r6, r1
 8000fa4:	d9f4      	bls.n	8000f90 <_printf_i+0x11c>
 8000fa6:	2b08      	cmp	r3, #8
 8000fa8:	d10b      	bne.n	8000fc2 <_printf_i+0x14e>
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	07de      	lsls	r6, r3, #31
 8000fae:	d508      	bpl.n	8000fc2 <_printf_i+0x14e>
 8000fb0:	6923      	ldr	r3, [r4, #16]
 8000fb2:	6861      	ldr	r1, [r4, #4]
 8000fb4:	4299      	cmp	r1, r3
 8000fb6:	bfde      	ittt	le
 8000fb8:	2330      	movle	r3, #48	; 0x30
 8000fba:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000fbe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000fc2:	1b52      	subs	r2, r2, r5
 8000fc4:	6122      	str	r2, [r4, #16]
 8000fc6:	464b      	mov	r3, r9
 8000fc8:	4621      	mov	r1, r4
 8000fca:	4640      	mov	r0, r8
 8000fcc:	f8cd a000 	str.w	sl, [sp]
 8000fd0:	aa03      	add	r2, sp, #12
 8000fd2:	f7ff fedf 	bl	8000d94 <_printf_common>
 8000fd6:	3001      	adds	r0, #1
 8000fd8:	d14c      	bne.n	8001074 <_printf_i+0x200>
 8000fda:	f04f 30ff 	mov.w	r0, #4294967295
 8000fde:	b004      	add	sp, #16
 8000fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe4:	4834      	ldr	r0, [pc, #208]	; (80010b8 <_printf_i+0x244>)
 8000fe6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000fea:	6829      	ldr	r1, [r5, #0]
 8000fec:	6823      	ldr	r3, [r4, #0]
 8000fee:	f851 6b04 	ldr.w	r6, [r1], #4
 8000ff2:	6029      	str	r1, [r5, #0]
 8000ff4:	061d      	lsls	r5, r3, #24
 8000ff6:	d514      	bpl.n	8001022 <_printf_i+0x1ae>
 8000ff8:	07df      	lsls	r7, r3, #31
 8000ffa:	bf44      	itt	mi
 8000ffc:	f043 0320 	orrmi.w	r3, r3, #32
 8001000:	6023      	strmi	r3, [r4, #0]
 8001002:	b91e      	cbnz	r6, 800100c <_printf_i+0x198>
 8001004:	6823      	ldr	r3, [r4, #0]
 8001006:	f023 0320 	bic.w	r3, r3, #32
 800100a:	6023      	str	r3, [r4, #0]
 800100c:	2310      	movs	r3, #16
 800100e:	e7af      	b.n	8000f70 <_printf_i+0xfc>
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	f043 0320 	orr.w	r3, r3, #32
 8001016:	6023      	str	r3, [r4, #0]
 8001018:	2378      	movs	r3, #120	; 0x78
 800101a:	4828      	ldr	r0, [pc, #160]	; (80010bc <_printf_i+0x248>)
 800101c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001020:	e7e3      	b.n	8000fea <_printf_i+0x176>
 8001022:	0659      	lsls	r1, r3, #25
 8001024:	bf48      	it	mi
 8001026:	b2b6      	uxthmi	r6, r6
 8001028:	e7e6      	b.n	8000ff8 <_printf_i+0x184>
 800102a:	4615      	mov	r5, r2
 800102c:	e7bb      	b.n	8000fa6 <_printf_i+0x132>
 800102e:	682b      	ldr	r3, [r5, #0]
 8001030:	6826      	ldr	r6, [r4, #0]
 8001032:	1d18      	adds	r0, r3, #4
 8001034:	6961      	ldr	r1, [r4, #20]
 8001036:	6028      	str	r0, [r5, #0]
 8001038:	0635      	lsls	r5, r6, #24
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	d501      	bpl.n	8001042 <_printf_i+0x1ce>
 800103e:	6019      	str	r1, [r3, #0]
 8001040:	e002      	b.n	8001048 <_printf_i+0x1d4>
 8001042:	0670      	lsls	r0, r6, #25
 8001044:	d5fb      	bpl.n	800103e <_printf_i+0x1ca>
 8001046:	8019      	strh	r1, [r3, #0]
 8001048:	2300      	movs	r3, #0
 800104a:	4615      	mov	r5, r2
 800104c:	6123      	str	r3, [r4, #16]
 800104e:	e7ba      	b.n	8000fc6 <_printf_i+0x152>
 8001050:	682b      	ldr	r3, [r5, #0]
 8001052:	2100      	movs	r1, #0
 8001054:	1d1a      	adds	r2, r3, #4
 8001056:	602a      	str	r2, [r5, #0]
 8001058:	681d      	ldr	r5, [r3, #0]
 800105a:	6862      	ldr	r2, [r4, #4]
 800105c:	4628      	mov	r0, r5
 800105e:	f000 faeb 	bl	8001638 <memchr>
 8001062:	b108      	cbz	r0, 8001068 <_printf_i+0x1f4>
 8001064:	1b40      	subs	r0, r0, r5
 8001066:	6060      	str	r0, [r4, #4]
 8001068:	6863      	ldr	r3, [r4, #4]
 800106a:	6123      	str	r3, [r4, #16]
 800106c:	2300      	movs	r3, #0
 800106e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001072:	e7a8      	b.n	8000fc6 <_printf_i+0x152>
 8001074:	462a      	mov	r2, r5
 8001076:	4649      	mov	r1, r9
 8001078:	4640      	mov	r0, r8
 800107a:	6923      	ldr	r3, [r4, #16]
 800107c:	47d0      	blx	sl
 800107e:	3001      	adds	r0, #1
 8001080:	d0ab      	beq.n	8000fda <_printf_i+0x166>
 8001082:	6823      	ldr	r3, [r4, #0]
 8001084:	079b      	lsls	r3, r3, #30
 8001086:	d413      	bmi.n	80010b0 <_printf_i+0x23c>
 8001088:	68e0      	ldr	r0, [r4, #12]
 800108a:	9b03      	ldr	r3, [sp, #12]
 800108c:	4298      	cmp	r0, r3
 800108e:	bfb8      	it	lt
 8001090:	4618      	movlt	r0, r3
 8001092:	e7a4      	b.n	8000fde <_printf_i+0x16a>
 8001094:	2301      	movs	r3, #1
 8001096:	4632      	mov	r2, r6
 8001098:	4649      	mov	r1, r9
 800109a:	4640      	mov	r0, r8
 800109c:	47d0      	blx	sl
 800109e:	3001      	adds	r0, #1
 80010a0:	d09b      	beq.n	8000fda <_printf_i+0x166>
 80010a2:	3501      	adds	r5, #1
 80010a4:	68e3      	ldr	r3, [r4, #12]
 80010a6:	9903      	ldr	r1, [sp, #12]
 80010a8:	1a5b      	subs	r3, r3, r1
 80010aa:	42ab      	cmp	r3, r5
 80010ac:	dcf2      	bgt.n	8001094 <_printf_i+0x220>
 80010ae:	e7eb      	b.n	8001088 <_printf_i+0x214>
 80010b0:	2500      	movs	r5, #0
 80010b2:	f104 0619 	add.w	r6, r4, #25
 80010b6:	e7f5      	b.n	80010a4 <_printf_i+0x230>
 80010b8:	080018f5 	.word	0x080018f5
 80010bc:	08001906 	.word	0x08001906

080010c0 <_putc_r>:
 80010c0:	b570      	push	{r4, r5, r6, lr}
 80010c2:	460d      	mov	r5, r1
 80010c4:	4614      	mov	r4, r2
 80010c6:	4606      	mov	r6, r0
 80010c8:	b118      	cbz	r0, 80010d2 <_putc_r+0x12>
 80010ca:	6983      	ldr	r3, [r0, #24]
 80010cc:	b90b      	cbnz	r3, 80010d2 <_putc_r+0x12>
 80010ce:	f7ff fb73 	bl	80007b8 <__sinit>
 80010d2:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <_putc_r+0x84>)
 80010d4:	429c      	cmp	r4, r3
 80010d6:	d124      	bne.n	8001122 <_putc_r+0x62>
 80010d8:	6874      	ldr	r4, [r6, #4]
 80010da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80010dc:	07d8      	lsls	r0, r3, #31
 80010de:	d405      	bmi.n	80010ec <_putc_r+0x2c>
 80010e0:	89a3      	ldrh	r3, [r4, #12]
 80010e2:	0599      	lsls	r1, r3, #22
 80010e4:	d402      	bmi.n	80010ec <_putc_r+0x2c>
 80010e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80010e8:	f7ff fc16 	bl	8000918 <__retarget_lock_acquire_recursive>
 80010ec:	68a3      	ldr	r3, [r4, #8]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	60a3      	str	r3, [r4, #8]
 80010f4:	da05      	bge.n	8001102 <_putc_r+0x42>
 80010f6:	69a2      	ldr	r2, [r4, #24]
 80010f8:	4293      	cmp	r3, r2
 80010fa:	db1c      	blt.n	8001136 <_putc_r+0x76>
 80010fc:	b2eb      	uxtb	r3, r5
 80010fe:	2b0a      	cmp	r3, #10
 8001100:	d019      	beq.n	8001136 <_putc_r+0x76>
 8001102:	6823      	ldr	r3, [r4, #0]
 8001104:	1c5a      	adds	r2, r3, #1
 8001106:	6022      	str	r2, [r4, #0]
 8001108:	701d      	strb	r5, [r3, #0]
 800110a:	b2ed      	uxtb	r5, r5
 800110c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800110e:	07da      	lsls	r2, r3, #31
 8001110:	d405      	bmi.n	800111e <_putc_r+0x5e>
 8001112:	89a3      	ldrh	r3, [r4, #12]
 8001114:	059b      	lsls	r3, r3, #22
 8001116:	d402      	bmi.n	800111e <_putc_r+0x5e>
 8001118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800111a:	f7ff fbfe 	bl	800091a <__retarget_lock_release_recursive>
 800111e:	4628      	mov	r0, r5
 8001120:	bd70      	pop	{r4, r5, r6, pc}
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <_putc_r+0x88>)
 8001124:	429c      	cmp	r4, r3
 8001126:	d101      	bne.n	800112c <_putc_r+0x6c>
 8001128:	68b4      	ldr	r4, [r6, #8]
 800112a:	e7d6      	b.n	80010da <_putc_r+0x1a>
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <_putc_r+0x8c>)
 800112e:	429c      	cmp	r4, r3
 8001130:	bf08      	it	eq
 8001132:	68f4      	ldreq	r4, [r6, #12]
 8001134:	e7d1      	b.n	80010da <_putc_r+0x1a>
 8001136:	4629      	mov	r1, r5
 8001138:	4622      	mov	r2, r4
 800113a:	4630      	mov	r0, r6
 800113c:	f000 f85c 	bl	80011f8 <__swbuf_r>
 8001140:	4605      	mov	r5, r0
 8001142:	e7e3      	b.n	800110c <_putc_r+0x4c>
 8001144:	080018a4 	.word	0x080018a4
 8001148:	080018c4 	.word	0x080018c4
 800114c:	08001884 	.word	0x08001884

08001150 <_sbrk_r>:
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	2300      	movs	r3, #0
 8001154:	4d05      	ldr	r5, [pc, #20]	; (800116c <_sbrk_r+0x1c>)
 8001156:	4604      	mov	r4, r0
 8001158:	4608      	mov	r0, r1
 800115a:	602b      	str	r3, [r5, #0]
 800115c:	f7ff f9ba 	bl	80004d4 <_sbrk>
 8001160:	1c43      	adds	r3, r0, #1
 8001162:	d102      	bne.n	800116a <_sbrk_r+0x1a>
 8001164:	682b      	ldr	r3, [r5, #0]
 8001166:	b103      	cbz	r3, 800116a <_sbrk_r+0x1a>
 8001168:	6023      	str	r3, [r4, #0]
 800116a:	bd38      	pop	{r3, r4, r5, pc}
 800116c:	200000d8 	.word	0x200000d8

08001170 <__sread>:
 8001170:	b510      	push	{r4, lr}
 8001172:	460c      	mov	r4, r1
 8001174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001178:	f000 fa78 	bl	800166c <_read_r>
 800117c:	2800      	cmp	r0, #0
 800117e:	bfab      	itete	ge
 8001180:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001182:	89a3      	ldrhlt	r3, [r4, #12]
 8001184:	181b      	addge	r3, r3, r0
 8001186:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800118a:	bfac      	ite	ge
 800118c:	6563      	strge	r3, [r4, #84]	; 0x54
 800118e:	81a3      	strhlt	r3, [r4, #12]
 8001190:	bd10      	pop	{r4, pc}

08001192 <__swrite>:
 8001192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001196:	461f      	mov	r7, r3
 8001198:	898b      	ldrh	r3, [r1, #12]
 800119a:	4605      	mov	r5, r0
 800119c:	05db      	lsls	r3, r3, #23
 800119e:	460c      	mov	r4, r1
 80011a0:	4616      	mov	r6, r2
 80011a2:	d505      	bpl.n	80011b0 <__swrite+0x1e>
 80011a4:	2302      	movs	r3, #2
 80011a6:	2200      	movs	r2, #0
 80011a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011ac:	f000 f9cc 	bl	8001548 <_lseek_r>
 80011b0:	89a3      	ldrh	r3, [r4, #12]
 80011b2:	4632      	mov	r2, r6
 80011b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011b8:	81a3      	strh	r3, [r4, #12]
 80011ba:	4628      	mov	r0, r5
 80011bc:	463b      	mov	r3, r7
 80011be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80011c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011c6:	f000 b869 	b.w	800129c <_write_r>

080011ca <__sseek>:
 80011ca:	b510      	push	{r4, lr}
 80011cc:	460c      	mov	r4, r1
 80011ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011d2:	f000 f9b9 	bl	8001548 <_lseek_r>
 80011d6:	1c43      	adds	r3, r0, #1
 80011d8:	89a3      	ldrh	r3, [r4, #12]
 80011da:	bf15      	itete	ne
 80011dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80011de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80011e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80011e6:	81a3      	strheq	r3, [r4, #12]
 80011e8:	bf18      	it	ne
 80011ea:	81a3      	strhne	r3, [r4, #12]
 80011ec:	bd10      	pop	{r4, pc}

080011ee <__sclose>:
 80011ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011f2:	f000 b8db 	b.w	80013ac <_close_r>
	...

080011f8 <__swbuf_r>:
 80011f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011fa:	460e      	mov	r6, r1
 80011fc:	4614      	mov	r4, r2
 80011fe:	4605      	mov	r5, r0
 8001200:	b118      	cbz	r0, 800120a <__swbuf_r+0x12>
 8001202:	6983      	ldr	r3, [r0, #24]
 8001204:	b90b      	cbnz	r3, 800120a <__swbuf_r+0x12>
 8001206:	f7ff fad7 	bl	80007b8 <__sinit>
 800120a:	4b21      	ldr	r3, [pc, #132]	; (8001290 <__swbuf_r+0x98>)
 800120c:	429c      	cmp	r4, r3
 800120e:	d12b      	bne.n	8001268 <__swbuf_r+0x70>
 8001210:	686c      	ldr	r4, [r5, #4]
 8001212:	69a3      	ldr	r3, [r4, #24]
 8001214:	60a3      	str	r3, [r4, #8]
 8001216:	89a3      	ldrh	r3, [r4, #12]
 8001218:	071a      	lsls	r2, r3, #28
 800121a:	d52f      	bpl.n	800127c <__swbuf_r+0x84>
 800121c:	6923      	ldr	r3, [r4, #16]
 800121e:	b36b      	cbz	r3, 800127c <__swbuf_r+0x84>
 8001220:	6923      	ldr	r3, [r4, #16]
 8001222:	6820      	ldr	r0, [r4, #0]
 8001224:	b2f6      	uxtb	r6, r6
 8001226:	1ac0      	subs	r0, r0, r3
 8001228:	6963      	ldr	r3, [r4, #20]
 800122a:	4637      	mov	r7, r6
 800122c:	4283      	cmp	r3, r0
 800122e:	dc04      	bgt.n	800123a <__swbuf_r+0x42>
 8001230:	4621      	mov	r1, r4
 8001232:	4628      	mov	r0, r5
 8001234:	f000 f94c 	bl	80014d0 <_fflush_r>
 8001238:	bb30      	cbnz	r0, 8001288 <__swbuf_r+0x90>
 800123a:	68a3      	ldr	r3, [r4, #8]
 800123c:	3001      	adds	r0, #1
 800123e:	3b01      	subs	r3, #1
 8001240:	60a3      	str	r3, [r4, #8]
 8001242:	6823      	ldr	r3, [r4, #0]
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	6022      	str	r2, [r4, #0]
 8001248:	701e      	strb	r6, [r3, #0]
 800124a:	6963      	ldr	r3, [r4, #20]
 800124c:	4283      	cmp	r3, r0
 800124e:	d004      	beq.n	800125a <__swbuf_r+0x62>
 8001250:	89a3      	ldrh	r3, [r4, #12]
 8001252:	07db      	lsls	r3, r3, #31
 8001254:	d506      	bpl.n	8001264 <__swbuf_r+0x6c>
 8001256:	2e0a      	cmp	r6, #10
 8001258:	d104      	bne.n	8001264 <__swbuf_r+0x6c>
 800125a:	4621      	mov	r1, r4
 800125c:	4628      	mov	r0, r5
 800125e:	f000 f937 	bl	80014d0 <_fflush_r>
 8001262:	b988      	cbnz	r0, 8001288 <__swbuf_r+0x90>
 8001264:	4638      	mov	r0, r7
 8001266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <__swbuf_r+0x9c>)
 800126a:	429c      	cmp	r4, r3
 800126c:	d101      	bne.n	8001272 <__swbuf_r+0x7a>
 800126e:	68ac      	ldr	r4, [r5, #8]
 8001270:	e7cf      	b.n	8001212 <__swbuf_r+0x1a>
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <__swbuf_r+0xa0>)
 8001274:	429c      	cmp	r4, r3
 8001276:	bf08      	it	eq
 8001278:	68ec      	ldreq	r4, [r5, #12]
 800127a:	e7ca      	b.n	8001212 <__swbuf_r+0x1a>
 800127c:	4621      	mov	r1, r4
 800127e:	4628      	mov	r0, r5
 8001280:	f000 f81e 	bl	80012c0 <__swsetup_r>
 8001284:	2800      	cmp	r0, #0
 8001286:	d0cb      	beq.n	8001220 <__swbuf_r+0x28>
 8001288:	f04f 37ff 	mov.w	r7, #4294967295
 800128c:	e7ea      	b.n	8001264 <__swbuf_r+0x6c>
 800128e:	bf00      	nop
 8001290:	080018a4 	.word	0x080018a4
 8001294:	080018c4 	.word	0x080018c4
 8001298:	08001884 	.word	0x08001884

0800129c <_write_r>:
 800129c:	b538      	push	{r3, r4, r5, lr}
 800129e:	4604      	mov	r4, r0
 80012a0:	4608      	mov	r0, r1
 80012a2:	4611      	mov	r1, r2
 80012a4:	2200      	movs	r2, #0
 80012a6:	4d05      	ldr	r5, [pc, #20]	; (80012bc <_write_r+0x20>)
 80012a8:	602a      	str	r2, [r5, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	f7ff f8c6 	bl	800043c <_write>
 80012b0:	1c43      	adds	r3, r0, #1
 80012b2:	d102      	bne.n	80012ba <_write_r+0x1e>
 80012b4:	682b      	ldr	r3, [r5, #0]
 80012b6:	b103      	cbz	r3, 80012ba <_write_r+0x1e>
 80012b8:	6023      	str	r3, [r4, #0]
 80012ba:	bd38      	pop	{r3, r4, r5, pc}
 80012bc:	200000d8 	.word	0x200000d8

080012c0 <__swsetup_r>:
 80012c0:	4b32      	ldr	r3, [pc, #200]	; (800138c <__swsetup_r+0xcc>)
 80012c2:	b570      	push	{r4, r5, r6, lr}
 80012c4:	681d      	ldr	r5, [r3, #0]
 80012c6:	4606      	mov	r6, r0
 80012c8:	460c      	mov	r4, r1
 80012ca:	b125      	cbz	r5, 80012d6 <__swsetup_r+0x16>
 80012cc:	69ab      	ldr	r3, [r5, #24]
 80012ce:	b913      	cbnz	r3, 80012d6 <__swsetup_r+0x16>
 80012d0:	4628      	mov	r0, r5
 80012d2:	f7ff fa71 	bl	80007b8 <__sinit>
 80012d6:	4b2e      	ldr	r3, [pc, #184]	; (8001390 <__swsetup_r+0xd0>)
 80012d8:	429c      	cmp	r4, r3
 80012da:	d10f      	bne.n	80012fc <__swsetup_r+0x3c>
 80012dc:	686c      	ldr	r4, [r5, #4]
 80012de:	89a3      	ldrh	r3, [r4, #12]
 80012e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012e4:	0719      	lsls	r1, r3, #28
 80012e6:	d42c      	bmi.n	8001342 <__swsetup_r+0x82>
 80012e8:	06dd      	lsls	r5, r3, #27
 80012ea:	d411      	bmi.n	8001310 <__swsetup_r+0x50>
 80012ec:	2309      	movs	r3, #9
 80012ee:	6033      	str	r3, [r6, #0]
 80012f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	81a3      	strh	r3, [r4, #12]
 80012fa:	e03e      	b.n	800137a <__swsetup_r+0xba>
 80012fc:	4b25      	ldr	r3, [pc, #148]	; (8001394 <__swsetup_r+0xd4>)
 80012fe:	429c      	cmp	r4, r3
 8001300:	d101      	bne.n	8001306 <__swsetup_r+0x46>
 8001302:	68ac      	ldr	r4, [r5, #8]
 8001304:	e7eb      	b.n	80012de <__swsetup_r+0x1e>
 8001306:	4b24      	ldr	r3, [pc, #144]	; (8001398 <__swsetup_r+0xd8>)
 8001308:	429c      	cmp	r4, r3
 800130a:	bf08      	it	eq
 800130c:	68ec      	ldreq	r4, [r5, #12]
 800130e:	e7e6      	b.n	80012de <__swsetup_r+0x1e>
 8001310:	0758      	lsls	r0, r3, #29
 8001312:	d512      	bpl.n	800133a <__swsetup_r+0x7a>
 8001314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001316:	b141      	cbz	r1, 800132a <__swsetup_r+0x6a>
 8001318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800131c:	4299      	cmp	r1, r3
 800131e:	d002      	beq.n	8001326 <__swsetup_r+0x66>
 8001320:	4630      	mov	r0, r6
 8001322:	f7ff fb03 	bl	800092c <_free_r>
 8001326:	2300      	movs	r3, #0
 8001328:	6363      	str	r3, [r4, #52]	; 0x34
 800132a:	89a3      	ldrh	r3, [r4, #12]
 800132c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001330:	81a3      	strh	r3, [r4, #12]
 8001332:	2300      	movs	r3, #0
 8001334:	6063      	str	r3, [r4, #4]
 8001336:	6923      	ldr	r3, [r4, #16]
 8001338:	6023      	str	r3, [r4, #0]
 800133a:	89a3      	ldrh	r3, [r4, #12]
 800133c:	f043 0308 	orr.w	r3, r3, #8
 8001340:	81a3      	strh	r3, [r4, #12]
 8001342:	6923      	ldr	r3, [r4, #16]
 8001344:	b94b      	cbnz	r3, 800135a <__swsetup_r+0x9a>
 8001346:	89a3      	ldrh	r3, [r4, #12]
 8001348:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800134c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001350:	d003      	beq.n	800135a <__swsetup_r+0x9a>
 8001352:	4621      	mov	r1, r4
 8001354:	4630      	mov	r0, r6
 8001356:	f000 f92f 	bl	80015b8 <__smakebuf_r>
 800135a:	89a0      	ldrh	r0, [r4, #12]
 800135c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001360:	f010 0301 	ands.w	r3, r0, #1
 8001364:	d00a      	beq.n	800137c <__swsetup_r+0xbc>
 8001366:	2300      	movs	r3, #0
 8001368:	60a3      	str	r3, [r4, #8]
 800136a:	6963      	ldr	r3, [r4, #20]
 800136c:	425b      	negs	r3, r3
 800136e:	61a3      	str	r3, [r4, #24]
 8001370:	6923      	ldr	r3, [r4, #16]
 8001372:	b943      	cbnz	r3, 8001386 <__swsetup_r+0xc6>
 8001374:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001378:	d1ba      	bne.n	80012f0 <__swsetup_r+0x30>
 800137a:	bd70      	pop	{r4, r5, r6, pc}
 800137c:	0781      	lsls	r1, r0, #30
 800137e:	bf58      	it	pl
 8001380:	6963      	ldrpl	r3, [r4, #20]
 8001382:	60a3      	str	r3, [r4, #8]
 8001384:	e7f4      	b.n	8001370 <__swsetup_r+0xb0>
 8001386:	2000      	movs	r0, #0
 8001388:	e7f7      	b.n	800137a <__swsetup_r+0xba>
 800138a:	bf00      	nop
 800138c:	20000048 	.word	0x20000048
 8001390:	080018a4 	.word	0x080018a4
 8001394:	080018c4 	.word	0x080018c4
 8001398:	08001884 	.word	0x08001884

0800139c <abort>:
 800139c:	2006      	movs	r0, #6
 800139e:	b508      	push	{r3, lr}
 80013a0:	f000 f99e 	bl	80016e0 <raise>
 80013a4:	2001      	movs	r0, #1
 80013a6:	f7ff f822 	bl	80003ee <_exit>
	...

080013ac <_close_r>:
 80013ac:	b538      	push	{r3, r4, r5, lr}
 80013ae:	2300      	movs	r3, #0
 80013b0:	4d05      	ldr	r5, [pc, #20]	; (80013c8 <_close_r+0x1c>)
 80013b2:	4604      	mov	r4, r0
 80013b4:	4608      	mov	r0, r1
 80013b6:	602b      	str	r3, [r5, #0]
 80013b8:	f7ff f85c 	bl	8000474 <_close>
 80013bc:	1c43      	adds	r3, r0, #1
 80013be:	d102      	bne.n	80013c6 <_close_r+0x1a>
 80013c0:	682b      	ldr	r3, [r5, #0]
 80013c2:	b103      	cbz	r3, 80013c6 <_close_r+0x1a>
 80013c4:	6023      	str	r3, [r4, #0]
 80013c6:	bd38      	pop	{r3, r4, r5, pc}
 80013c8:	200000d8 	.word	0x200000d8

080013cc <__sflush_r>:
 80013cc:	898a      	ldrh	r2, [r1, #12]
 80013ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013d0:	4605      	mov	r5, r0
 80013d2:	0710      	lsls	r0, r2, #28
 80013d4:	460c      	mov	r4, r1
 80013d6:	d457      	bmi.n	8001488 <__sflush_r+0xbc>
 80013d8:	684b      	ldr	r3, [r1, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	dc04      	bgt.n	80013e8 <__sflush_r+0x1c>
 80013de:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	dc01      	bgt.n	80013e8 <__sflush_r+0x1c>
 80013e4:	2000      	movs	r0, #0
 80013e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013ea:	2e00      	cmp	r6, #0
 80013ec:	d0fa      	beq.n	80013e4 <__sflush_r+0x18>
 80013ee:	2300      	movs	r3, #0
 80013f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80013f4:	682f      	ldr	r7, [r5, #0]
 80013f6:	602b      	str	r3, [r5, #0]
 80013f8:	d032      	beq.n	8001460 <__sflush_r+0x94>
 80013fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80013fc:	89a3      	ldrh	r3, [r4, #12]
 80013fe:	075a      	lsls	r2, r3, #29
 8001400:	d505      	bpl.n	800140e <__sflush_r+0x42>
 8001402:	6863      	ldr	r3, [r4, #4]
 8001404:	1ac0      	subs	r0, r0, r3
 8001406:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001408:	b10b      	cbz	r3, 800140e <__sflush_r+0x42>
 800140a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800140c:	1ac0      	subs	r0, r0, r3
 800140e:	2300      	movs	r3, #0
 8001410:	4602      	mov	r2, r0
 8001412:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001414:	4628      	mov	r0, r5
 8001416:	6a21      	ldr	r1, [r4, #32]
 8001418:	47b0      	blx	r6
 800141a:	1c43      	adds	r3, r0, #1
 800141c:	89a3      	ldrh	r3, [r4, #12]
 800141e:	d106      	bne.n	800142e <__sflush_r+0x62>
 8001420:	6829      	ldr	r1, [r5, #0]
 8001422:	291d      	cmp	r1, #29
 8001424:	d82c      	bhi.n	8001480 <__sflush_r+0xb4>
 8001426:	4a29      	ldr	r2, [pc, #164]	; (80014cc <__sflush_r+0x100>)
 8001428:	40ca      	lsrs	r2, r1
 800142a:	07d6      	lsls	r6, r2, #31
 800142c:	d528      	bpl.n	8001480 <__sflush_r+0xb4>
 800142e:	2200      	movs	r2, #0
 8001430:	6062      	str	r2, [r4, #4]
 8001432:	6922      	ldr	r2, [r4, #16]
 8001434:	04d9      	lsls	r1, r3, #19
 8001436:	6022      	str	r2, [r4, #0]
 8001438:	d504      	bpl.n	8001444 <__sflush_r+0x78>
 800143a:	1c42      	adds	r2, r0, #1
 800143c:	d101      	bne.n	8001442 <__sflush_r+0x76>
 800143e:	682b      	ldr	r3, [r5, #0]
 8001440:	b903      	cbnz	r3, 8001444 <__sflush_r+0x78>
 8001442:	6560      	str	r0, [r4, #84]	; 0x54
 8001444:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001446:	602f      	str	r7, [r5, #0]
 8001448:	2900      	cmp	r1, #0
 800144a:	d0cb      	beq.n	80013e4 <__sflush_r+0x18>
 800144c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001450:	4299      	cmp	r1, r3
 8001452:	d002      	beq.n	800145a <__sflush_r+0x8e>
 8001454:	4628      	mov	r0, r5
 8001456:	f7ff fa69 	bl	800092c <_free_r>
 800145a:	2000      	movs	r0, #0
 800145c:	6360      	str	r0, [r4, #52]	; 0x34
 800145e:	e7c2      	b.n	80013e6 <__sflush_r+0x1a>
 8001460:	6a21      	ldr	r1, [r4, #32]
 8001462:	2301      	movs	r3, #1
 8001464:	4628      	mov	r0, r5
 8001466:	47b0      	blx	r6
 8001468:	1c41      	adds	r1, r0, #1
 800146a:	d1c7      	bne.n	80013fc <__sflush_r+0x30>
 800146c:	682b      	ldr	r3, [r5, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0c4      	beq.n	80013fc <__sflush_r+0x30>
 8001472:	2b1d      	cmp	r3, #29
 8001474:	d001      	beq.n	800147a <__sflush_r+0xae>
 8001476:	2b16      	cmp	r3, #22
 8001478:	d101      	bne.n	800147e <__sflush_r+0xb2>
 800147a:	602f      	str	r7, [r5, #0]
 800147c:	e7b2      	b.n	80013e4 <__sflush_r+0x18>
 800147e:	89a3      	ldrh	r3, [r4, #12]
 8001480:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001484:	81a3      	strh	r3, [r4, #12]
 8001486:	e7ae      	b.n	80013e6 <__sflush_r+0x1a>
 8001488:	690f      	ldr	r7, [r1, #16]
 800148a:	2f00      	cmp	r7, #0
 800148c:	d0aa      	beq.n	80013e4 <__sflush_r+0x18>
 800148e:	0793      	lsls	r3, r2, #30
 8001490:	bf18      	it	ne
 8001492:	2300      	movne	r3, #0
 8001494:	680e      	ldr	r6, [r1, #0]
 8001496:	bf08      	it	eq
 8001498:	694b      	ldreq	r3, [r1, #20]
 800149a:	1bf6      	subs	r6, r6, r7
 800149c:	600f      	str	r7, [r1, #0]
 800149e:	608b      	str	r3, [r1, #8]
 80014a0:	2e00      	cmp	r6, #0
 80014a2:	dd9f      	ble.n	80013e4 <__sflush_r+0x18>
 80014a4:	4633      	mov	r3, r6
 80014a6:	463a      	mov	r2, r7
 80014a8:	4628      	mov	r0, r5
 80014aa:	6a21      	ldr	r1, [r4, #32]
 80014ac:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80014b0:	47e0      	blx	ip
 80014b2:	2800      	cmp	r0, #0
 80014b4:	dc06      	bgt.n	80014c4 <__sflush_r+0xf8>
 80014b6:	89a3      	ldrh	r3, [r4, #12]
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295
 80014bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014c0:	81a3      	strh	r3, [r4, #12]
 80014c2:	e790      	b.n	80013e6 <__sflush_r+0x1a>
 80014c4:	4407      	add	r7, r0
 80014c6:	1a36      	subs	r6, r6, r0
 80014c8:	e7ea      	b.n	80014a0 <__sflush_r+0xd4>
 80014ca:	bf00      	nop
 80014cc:	20400001 	.word	0x20400001

080014d0 <_fflush_r>:
 80014d0:	b538      	push	{r3, r4, r5, lr}
 80014d2:	690b      	ldr	r3, [r1, #16]
 80014d4:	4605      	mov	r5, r0
 80014d6:	460c      	mov	r4, r1
 80014d8:	b913      	cbnz	r3, 80014e0 <_fflush_r+0x10>
 80014da:	2500      	movs	r5, #0
 80014dc:	4628      	mov	r0, r5
 80014de:	bd38      	pop	{r3, r4, r5, pc}
 80014e0:	b118      	cbz	r0, 80014ea <_fflush_r+0x1a>
 80014e2:	6983      	ldr	r3, [r0, #24]
 80014e4:	b90b      	cbnz	r3, 80014ea <_fflush_r+0x1a>
 80014e6:	f7ff f967 	bl	80007b8 <__sinit>
 80014ea:	4b14      	ldr	r3, [pc, #80]	; (800153c <_fflush_r+0x6c>)
 80014ec:	429c      	cmp	r4, r3
 80014ee:	d11b      	bne.n	8001528 <_fflush_r+0x58>
 80014f0:	686c      	ldr	r4, [r5, #4]
 80014f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0ef      	beq.n	80014da <_fflush_r+0xa>
 80014fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80014fc:	07d0      	lsls	r0, r2, #31
 80014fe:	d404      	bmi.n	800150a <_fflush_r+0x3a>
 8001500:	0599      	lsls	r1, r3, #22
 8001502:	d402      	bmi.n	800150a <_fflush_r+0x3a>
 8001504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001506:	f7ff fa07 	bl	8000918 <__retarget_lock_acquire_recursive>
 800150a:	4628      	mov	r0, r5
 800150c:	4621      	mov	r1, r4
 800150e:	f7ff ff5d 	bl	80013cc <__sflush_r>
 8001512:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001514:	4605      	mov	r5, r0
 8001516:	07da      	lsls	r2, r3, #31
 8001518:	d4e0      	bmi.n	80014dc <_fflush_r+0xc>
 800151a:	89a3      	ldrh	r3, [r4, #12]
 800151c:	059b      	lsls	r3, r3, #22
 800151e:	d4dd      	bmi.n	80014dc <_fflush_r+0xc>
 8001520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001522:	f7ff f9fa 	bl	800091a <__retarget_lock_release_recursive>
 8001526:	e7d9      	b.n	80014dc <_fflush_r+0xc>
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <_fflush_r+0x70>)
 800152a:	429c      	cmp	r4, r3
 800152c:	d101      	bne.n	8001532 <_fflush_r+0x62>
 800152e:	68ac      	ldr	r4, [r5, #8]
 8001530:	e7df      	b.n	80014f2 <_fflush_r+0x22>
 8001532:	4b04      	ldr	r3, [pc, #16]	; (8001544 <_fflush_r+0x74>)
 8001534:	429c      	cmp	r4, r3
 8001536:	bf08      	it	eq
 8001538:	68ec      	ldreq	r4, [r5, #12]
 800153a:	e7da      	b.n	80014f2 <_fflush_r+0x22>
 800153c:	080018a4 	.word	0x080018a4
 8001540:	080018c4 	.word	0x080018c4
 8001544:	08001884 	.word	0x08001884

08001548 <_lseek_r>:
 8001548:	b538      	push	{r3, r4, r5, lr}
 800154a:	4604      	mov	r4, r0
 800154c:	4608      	mov	r0, r1
 800154e:	4611      	mov	r1, r2
 8001550:	2200      	movs	r2, #0
 8001552:	4d05      	ldr	r5, [pc, #20]	; (8001568 <_lseek_r+0x20>)
 8001554:	602a      	str	r2, [r5, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	f7fe ffb0 	bl	80004bc <_lseek>
 800155c:	1c43      	adds	r3, r0, #1
 800155e:	d102      	bne.n	8001566 <_lseek_r+0x1e>
 8001560:	682b      	ldr	r3, [r5, #0]
 8001562:	b103      	cbz	r3, 8001566 <_lseek_r+0x1e>
 8001564:	6023      	str	r3, [r4, #0]
 8001566:	bd38      	pop	{r3, r4, r5, pc}
 8001568:	200000d8 	.word	0x200000d8

0800156c <__swhatbuf_r>:
 800156c:	b570      	push	{r4, r5, r6, lr}
 800156e:	460e      	mov	r6, r1
 8001570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001574:	4614      	mov	r4, r2
 8001576:	2900      	cmp	r1, #0
 8001578:	461d      	mov	r5, r3
 800157a:	b096      	sub	sp, #88	; 0x58
 800157c:	da08      	bge.n	8001590 <__swhatbuf_r+0x24>
 800157e:	2200      	movs	r2, #0
 8001580:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001584:	602a      	str	r2, [r5, #0]
 8001586:	061a      	lsls	r2, r3, #24
 8001588:	d410      	bmi.n	80015ac <__swhatbuf_r+0x40>
 800158a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800158e:	e00e      	b.n	80015ae <__swhatbuf_r+0x42>
 8001590:	466a      	mov	r2, sp
 8001592:	f000 f8c1 	bl	8001718 <_fstat_r>
 8001596:	2800      	cmp	r0, #0
 8001598:	dbf1      	blt.n	800157e <__swhatbuf_r+0x12>
 800159a:	9a01      	ldr	r2, [sp, #4]
 800159c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80015a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80015a4:	425a      	negs	r2, r3
 80015a6:	415a      	adcs	r2, r3
 80015a8:	602a      	str	r2, [r5, #0]
 80015aa:	e7ee      	b.n	800158a <__swhatbuf_r+0x1e>
 80015ac:	2340      	movs	r3, #64	; 0x40
 80015ae:	2000      	movs	r0, #0
 80015b0:	6023      	str	r3, [r4, #0]
 80015b2:	b016      	add	sp, #88	; 0x58
 80015b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080015b8 <__smakebuf_r>:
 80015b8:	898b      	ldrh	r3, [r1, #12]
 80015ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80015bc:	079d      	lsls	r5, r3, #30
 80015be:	4606      	mov	r6, r0
 80015c0:	460c      	mov	r4, r1
 80015c2:	d507      	bpl.n	80015d4 <__smakebuf_r+0x1c>
 80015c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80015c8:	6023      	str	r3, [r4, #0]
 80015ca:	6123      	str	r3, [r4, #16]
 80015cc:	2301      	movs	r3, #1
 80015ce:	6163      	str	r3, [r4, #20]
 80015d0:	b002      	add	sp, #8
 80015d2:	bd70      	pop	{r4, r5, r6, pc}
 80015d4:	466a      	mov	r2, sp
 80015d6:	ab01      	add	r3, sp, #4
 80015d8:	f7ff ffc8 	bl	800156c <__swhatbuf_r>
 80015dc:	9900      	ldr	r1, [sp, #0]
 80015de:	4605      	mov	r5, r0
 80015e0:	4630      	mov	r0, r6
 80015e2:	f7ff fa0b 	bl	80009fc <_malloc_r>
 80015e6:	b948      	cbnz	r0, 80015fc <__smakebuf_r+0x44>
 80015e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015ec:	059a      	lsls	r2, r3, #22
 80015ee:	d4ef      	bmi.n	80015d0 <__smakebuf_r+0x18>
 80015f0:	f023 0303 	bic.w	r3, r3, #3
 80015f4:	f043 0302 	orr.w	r3, r3, #2
 80015f8:	81a3      	strh	r3, [r4, #12]
 80015fa:	e7e3      	b.n	80015c4 <__smakebuf_r+0xc>
 80015fc:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <__smakebuf_r+0x7c>)
 80015fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8001600:	89a3      	ldrh	r3, [r4, #12]
 8001602:	6020      	str	r0, [r4, #0]
 8001604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001608:	81a3      	strh	r3, [r4, #12]
 800160a:	9b00      	ldr	r3, [sp, #0]
 800160c:	6120      	str	r0, [r4, #16]
 800160e:	6163      	str	r3, [r4, #20]
 8001610:	9b01      	ldr	r3, [sp, #4]
 8001612:	b15b      	cbz	r3, 800162c <__smakebuf_r+0x74>
 8001614:	4630      	mov	r0, r6
 8001616:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800161a:	f000 f88f 	bl	800173c <_isatty_r>
 800161e:	b128      	cbz	r0, 800162c <__smakebuf_r+0x74>
 8001620:	89a3      	ldrh	r3, [r4, #12]
 8001622:	f023 0303 	bic.w	r3, r3, #3
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	81a3      	strh	r3, [r4, #12]
 800162c:	89a0      	ldrh	r0, [r4, #12]
 800162e:	4305      	orrs	r5, r0
 8001630:	81a5      	strh	r5, [r4, #12]
 8001632:	e7cd      	b.n	80015d0 <__smakebuf_r+0x18>
 8001634:	08000751 	.word	0x08000751

08001638 <memchr>:
 8001638:	4603      	mov	r3, r0
 800163a:	b510      	push	{r4, lr}
 800163c:	b2c9      	uxtb	r1, r1
 800163e:	4402      	add	r2, r0
 8001640:	4293      	cmp	r3, r2
 8001642:	4618      	mov	r0, r3
 8001644:	d101      	bne.n	800164a <memchr+0x12>
 8001646:	2000      	movs	r0, #0
 8001648:	e003      	b.n	8001652 <memchr+0x1a>
 800164a:	7804      	ldrb	r4, [r0, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	428c      	cmp	r4, r1
 8001650:	d1f6      	bne.n	8001640 <memchr+0x8>
 8001652:	bd10      	pop	{r4, pc}

08001654 <__malloc_lock>:
 8001654:	4801      	ldr	r0, [pc, #4]	; (800165c <__malloc_lock+0x8>)
 8001656:	f7ff b95f 	b.w	8000918 <__retarget_lock_acquire_recursive>
 800165a:	bf00      	nop
 800165c:	200000cc 	.word	0x200000cc

08001660 <__malloc_unlock>:
 8001660:	4801      	ldr	r0, [pc, #4]	; (8001668 <__malloc_unlock+0x8>)
 8001662:	f7ff b95a 	b.w	800091a <__retarget_lock_release_recursive>
 8001666:	bf00      	nop
 8001668:	200000cc 	.word	0x200000cc

0800166c <_read_r>:
 800166c:	b538      	push	{r3, r4, r5, lr}
 800166e:	4604      	mov	r4, r0
 8001670:	4608      	mov	r0, r1
 8001672:	4611      	mov	r1, r2
 8001674:	2200      	movs	r2, #0
 8001676:	4d05      	ldr	r5, [pc, #20]	; (800168c <_read_r+0x20>)
 8001678:	602a      	str	r2, [r5, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	f7fe fec1 	bl	8000402 <_read>
 8001680:	1c43      	adds	r3, r0, #1
 8001682:	d102      	bne.n	800168a <_read_r+0x1e>
 8001684:	682b      	ldr	r3, [r5, #0]
 8001686:	b103      	cbz	r3, 800168a <_read_r+0x1e>
 8001688:	6023      	str	r3, [r4, #0]
 800168a:	bd38      	pop	{r3, r4, r5, pc}
 800168c:	200000d8 	.word	0x200000d8

08001690 <_raise_r>:
 8001690:	291f      	cmp	r1, #31
 8001692:	b538      	push	{r3, r4, r5, lr}
 8001694:	4604      	mov	r4, r0
 8001696:	460d      	mov	r5, r1
 8001698:	d904      	bls.n	80016a4 <_raise_r+0x14>
 800169a:	2316      	movs	r3, #22
 800169c:	6003      	str	r3, [r0, #0]
 800169e:	f04f 30ff 	mov.w	r0, #4294967295
 80016a2:	bd38      	pop	{r3, r4, r5, pc}
 80016a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80016a6:	b112      	cbz	r2, 80016ae <_raise_r+0x1e>
 80016a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80016ac:	b94b      	cbnz	r3, 80016c2 <_raise_r+0x32>
 80016ae:	4620      	mov	r0, r4
 80016b0:	f000 f830 	bl	8001714 <_getpid_r>
 80016b4:	462a      	mov	r2, r5
 80016b6:	4601      	mov	r1, r0
 80016b8:	4620      	mov	r0, r4
 80016ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016be:	f000 b817 	b.w	80016f0 <_kill_r>
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d00a      	beq.n	80016dc <_raise_r+0x4c>
 80016c6:	1c59      	adds	r1, r3, #1
 80016c8:	d103      	bne.n	80016d2 <_raise_r+0x42>
 80016ca:	2316      	movs	r3, #22
 80016cc:	6003      	str	r3, [r0, #0]
 80016ce:	2001      	movs	r0, #1
 80016d0:	e7e7      	b.n	80016a2 <_raise_r+0x12>
 80016d2:	2400      	movs	r4, #0
 80016d4:	4628      	mov	r0, r5
 80016d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80016da:	4798      	blx	r3
 80016dc:	2000      	movs	r0, #0
 80016de:	e7e0      	b.n	80016a2 <_raise_r+0x12>

080016e0 <raise>:
 80016e0:	4b02      	ldr	r3, [pc, #8]	; (80016ec <raise+0xc>)
 80016e2:	4601      	mov	r1, r0
 80016e4:	6818      	ldr	r0, [r3, #0]
 80016e6:	f7ff bfd3 	b.w	8001690 <_raise_r>
 80016ea:	bf00      	nop
 80016ec:	20000048 	.word	0x20000048

080016f0 <_kill_r>:
 80016f0:	b538      	push	{r3, r4, r5, lr}
 80016f2:	2300      	movs	r3, #0
 80016f4:	4d06      	ldr	r5, [pc, #24]	; (8001710 <_kill_r+0x20>)
 80016f6:	4604      	mov	r4, r0
 80016f8:	4608      	mov	r0, r1
 80016fa:	4611      	mov	r1, r2
 80016fc:	602b      	str	r3, [r5, #0]
 80016fe:	f7fe fe66 	bl	80003ce <_kill>
 8001702:	1c43      	adds	r3, r0, #1
 8001704:	d102      	bne.n	800170c <_kill_r+0x1c>
 8001706:	682b      	ldr	r3, [r5, #0]
 8001708:	b103      	cbz	r3, 800170c <_kill_r+0x1c>
 800170a:	6023      	str	r3, [r4, #0]
 800170c:	bd38      	pop	{r3, r4, r5, pc}
 800170e:	bf00      	nop
 8001710:	200000d8 	.word	0x200000d8

08001714 <_getpid_r>:
 8001714:	f7fe be54 	b.w	80003c0 <_getpid>

08001718 <_fstat_r>:
 8001718:	b538      	push	{r3, r4, r5, lr}
 800171a:	2300      	movs	r3, #0
 800171c:	4d06      	ldr	r5, [pc, #24]	; (8001738 <_fstat_r+0x20>)
 800171e:	4604      	mov	r4, r0
 8001720:	4608      	mov	r0, r1
 8001722:	4611      	mov	r1, r2
 8001724:	602b      	str	r3, [r5, #0]
 8001726:	f7fe feb0 	bl	800048a <_fstat>
 800172a:	1c43      	adds	r3, r0, #1
 800172c:	d102      	bne.n	8001734 <_fstat_r+0x1c>
 800172e:	682b      	ldr	r3, [r5, #0]
 8001730:	b103      	cbz	r3, 8001734 <_fstat_r+0x1c>
 8001732:	6023      	str	r3, [r4, #0]
 8001734:	bd38      	pop	{r3, r4, r5, pc}
 8001736:	bf00      	nop
 8001738:	200000d8 	.word	0x200000d8

0800173c <_isatty_r>:
 800173c:	b538      	push	{r3, r4, r5, lr}
 800173e:	2300      	movs	r3, #0
 8001740:	4d05      	ldr	r5, [pc, #20]	; (8001758 <_isatty_r+0x1c>)
 8001742:	4604      	mov	r4, r0
 8001744:	4608      	mov	r0, r1
 8001746:	602b      	str	r3, [r5, #0]
 8001748:	f7fe feae 	bl	80004a8 <_isatty>
 800174c:	1c43      	adds	r3, r0, #1
 800174e:	d102      	bne.n	8001756 <_isatty_r+0x1a>
 8001750:	682b      	ldr	r3, [r5, #0]
 8001752:	b103      	cbz	r3, 8001756 <_isatty_r+0x1a>
 8001754:	6023      	str	r3, [r4, #0]
 8001756:	bd38      	pop	{r3, r4, r5, pc}
 8001758:	200000d8 	.word	0x200000d8

0800175c <_init>:
 800175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800175e:	bf00      	nop
 8001760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001762:	bc08      	pop	{r3}
 8001764:	469e      	mov	lr, r3
 8001766:	4770      	bx	lr

08001768 <_fini>:
 8001768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800176a:	bf00      	nop
 800176c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800176e:	bc08      	pop	{r3}
 8001770:	469e      	mov	lr, r3
 8001772:	4770      	bx	lr
